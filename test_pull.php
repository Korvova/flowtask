<?php
/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PULL –º–µ—Ö–∞–Ω–∏–∑–º–∞
 */

define("NO_KEEP_STATISTIC", true);
define("NO_AGENT_STATISTIC", true);
define("NOT_CHECK_PERMISSIONS", true);

require($_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/prolog_before.php");

use Bitrix\Main\Loader;
use Bitrix\Pull\Event;

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Pull
if (Loader::includeModule('pull')) {
    \Bitrix\Main\UI\Extension::load('pull.client');
    \CJSCore::Init(['pull']);
    
    // –í–ê–ñ–ù–û: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è!
    global $USER;
    $userId = (int)$USER->GetID();
    if ($userId > 0) {
        \CPullWatch::Add($userId, 'TELEGSARFLOW_EVENTS');
    }
}

// –ï—Å–ª–∏ POST –∑–∞–ø—Ä–æ—Å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    header('Content-Type: application/json');
    
    if (!Loader::includeModule('pull')) {
        echo json_encode(['success' => false, 'error' => '–ú–æ–¥—É–ª—å Pull –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω']);
        exit;
    }
    
    $input = file_get_contents('php://input');
    $data = json_decode($input, true);
    
    $userId = $data['userId'] ?? 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1
    $taskId = $data['taskId'] ?? 3;
    $status = $data['status'] ?? 5;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PULL —Å–æ–±—ã—Ç–∏–µ
    Event::add($userId, [
        'module_id' => 'telegsarflow',
        'command' => 'task_status_changed',
        'params' => [
            'TASK_ID' => (int)$taskId,
            'STATUS' => (int)$status,
            'test' => true,
            'time' => time()
        ]
    ]);
    
    echo json_encode([
        'success' => true, 
        'message' => 'PULL —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        'userId' => $userId,
        'taskId' => $taskId,
        'status' => $status
    ]);
    exit;
}

global $USER;
$currentUserId = $USER->GetID();
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–¢–µ—Å—Ç PULL</title>
    <?php $APPLICATION->ShowHead(); ?>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 { color: #333; }
        .status {
            padding: 15px;
            margin: 15px 0;
            border-radius: 5px;
            background: #e3f2fd;
            border-left: 4px solid #2196f3;
        }
        .event {
            padding: 10px;
            margin: 10px 0;
            background: #f0f0f0;
            border-radius: 5px;
            font-family: monospace;
        }
        button {
            padding: 10px 20px;
            margin: 5px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            color: white;
        }
        .btn-send { background: #4CAF50; }
        .btn-check { background: #2196F3; }
        .btn-clear { background: #f44336; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üß™ –¢–µ—Å—Ç PULL –º–µ—Ö–∞–Ω–∏–∑–º–∞</h1>
        
        <div class="status">
            <strong>–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ID = <?php echo $currentUserId; ?><br>
            <strong>–ú–æ–¥—É–ª—å Pull:</strong> <?php echo Loader::includeModule('pull') ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω' : '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'; ?>
        </div>

        <h3>–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</h3>
        <button class="btn-send" onclick="sendPullEvent()">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PULL —Å–æ–±—ã—Ç–∏–µ</button>
        <button class="btn-check" onclick="checkBXPull()">üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å BX.PULL</button>
        <button class="btn-clear" onclick="clearLog()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥</button>

        <h3>–õ–æ–≥ —Å–æ–±—ã—Ç–∏–π:</h3>
        <div id="log"></div>
    </div>

    <script>
        function log(message, isError = false) {
            const logDiv = document.getElementById('log');
            const eventDiv = document.createElement('div');
            eventDiv.className = 'event';
            eventDiv.style.borderLeft = isError ? '4px solid #f44336' : '4px solid #4CAF50';
            eventDiv.textContent = new Date().toLocaleTimeString() + ' | ' + message;
            logDiv.insertBefore(eventDiv, logDiv.firstChild);
        }

        function clearLog() {
            document.getElementById('log').innerHTML = '';
        }

        function sendPullEvent() {
            const userId = <?php echo $currentUserId; ?>;
            const taskId = 3;
            const status = 5; // –ó–∞–≤–µ—Ä—à–µ–Ω–∞
            
            log('–û—Ç–ø—Ä–∞–≤–ª—è—é PULL —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + userId + ', –∑–∞–¥–∞—á–∞ ' + taskId + ', —Å—Ç–∞—Ç—É—Å ' + status);
            
            fetch('', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({userId, taskId, status})
            })
            .then(r => r.json())
            .then(data => {
                if (data.success) {
                    log('‚úÖ PULL —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ' + JSON.stringify(data));
                } else {
                    log('‚ùå –û—à–∏–±–∫–∞: ' + data.error, true);
                }
            })
            .catch(err => {
                log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + err.message, true);
            });
        }

        function checkBXPull() {
            log('–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å BX –∏ BX.PULL...');
            
            if (typeof BX === 'undefined') {
                log('‚ùå BX –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω', true);
                return;
            }
            log('‚úÖ BX –æ–ø—Ä–µ–¥–µ–ª—ë–Ω');
            
            if (typeof BX.PULL === 'undefined') {
                log('‚ùå BX.PULL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω', true);
                return;
            }
            log('‚úÖ BX.PULL –æ–ø—Ä–µ–¥–µ–ª—ë–Ω');
            
            if (typeof BX.PULL.start === 'function') {
                log('‚úÖ BX.PULL.start() –¥–æ—Å—Ç—É–ø–µ–Ω');
                try {
                    BX.PULL.start();
                    log('‚úÖ BX.PULL.start() –≤—ã–ø–æ–ª–Ω–µ–Ω');
                } catch(e) {
                    log('‚ÑπÔ∏è BX.PULL —É–∂–µ –∑–∞–ø—É—â–µ–Ω: ' + e.message);
                }
            } else {
                log('‚ùå BX.PULL.start() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', true);
            }
            
            if (typeof BX.addCustomEvent === 'function') {
                log('‚úÖ BX.addCustomEvent() –¥–æ—Å—Ç—É–ø–µ–Ω');
            } else {
                log('‚ùå BX.addCustomEvent() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', true);
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.addEventListener('load', function() {
            log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º BX
            setTimeout(checkBXPull, 500);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PULL
            if (typeof BX !== 'undefined' && typeof BX.ready === 'function') {
                BX.ready(function() {
                    log('BX.ready –≤—ã–ø–æ–ª–Ω–µ–Ω');
                    
                    if (typeof BX.PULL !== 'undefined') {
                        BX.PULL.start();
                        log('‚úÖ BX.PULL –∑–∞–ø—É—â–µ–Ω');
                    }
                    
                    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –í–°–ï —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    BX.addCustomEvent("onPullEvent", function(moduleId, command, params) {
                        log('üì¨ onPullEvent: moduleId=' + moduleId + ', command=' + command + ', params=' + JSON.stringify(params));
                    });

                    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
                    BX.addCustomEvent("onPullEvent-telegsarflow", function(command, params) {
                        log('üì¨ onPullEvent-telegsarflow: command=' + command + ', params=' + JSON.stringify(params));
                    });

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º PULL.subscribe (–Ω–æ–≤—ã–π API)
                    if (typeof BX.PULL.subscribe === 'function') {
                        BX.PULL.subscribe({
                            moduleId: 'telegsarflow',
                            command: 'task_status_changed',
                            callback: function(params, extra, command) {
                                log('üì¨ BX.PULL.subscribe –ø–æ–ª—É—á–µ–Ω–æ! params=' + JSON.stringify(params) + ', command=' + command);
                            }
                        });
                        log('‚úÖ BX.PULL.subscribe —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                    }

                    log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
                });
            } else {
                log('‚ùå BX.ready –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', true);
            }
        });
    </script>
</body>
</html>
