<?php
// –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–ª–æ–≥ Bitrix
define("NO_KEEP_STATISTIC", true);
define("NO_AGENT_STATISTIC", true);
define("NOT_CHECK_PERMISSIONS", true);
define('PUBLIC_AJAX_MODE', true);

require($_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/prolog_before.php");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è Push & Pull
if (!\Bitrix\Main\Loader::includeModule('pull')) {
    die('{"status":"error", "message":"–ú–æ–¥—É–ª—å Push & Pull –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."}');
}

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã Pull
\Bitrix\Main\UI\Extension::load('pull.client');
CJSCore::Init();
?>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–ü—Ä–æ—Ü–µ—Å—Å—ã - Flowtask</title>
    <?php $APPLICATION->ShowHead(); ?>
    <script src="//api.bitrix24.com/api/v1/"></script>

    <script src="assets/js/react.min.js"></script>
    <script src="assets/js/react-dom.min.js"></script>
    <script src="assets/js/reactflow.min.js"></script>
    <link rel="stylesheet" href="assets/css/reactflow.css">
    <link rel="stylesheet" href="assets/css/main.css">
</head>
<body>
    <div id="root">
        <div class="loading">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</div>
    </div>

    <!-- –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê - –û–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ -->
    <script src="components/EntityManagerV2.js?v=<?= time() ?>"></script>
    <script src="components/TaskHandler.js?v=<?= time() ?>"></script>
    <script src="components/TaskModalV2.js?v=<?= time() ?>"></script>
    <script src="components/FlowCanvasV2.js?v=<?= time() ?>"></script>

    <!-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±–µ–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ -->
    <script src="components/StatusColors.js?v=<?= time() ?>"></script>
    <script src="components/PullSubscription.js?v=<?= time() ?>"></script>

    <!-- –°—Ç–∞—Ä–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) -->
    <script src="components/EntityManager.js?v=<?= time() ?>"></script>
    <script src="components/TaskCreator.js?v=<?= time() ?>"></script>
    <script src="components/TaskNode.js?v=<?= time() ?>"></script>
    <script src="components/TaskModal.js?v=<?= time() ?>"></script>
    <script src="components/FlowCanvas.js?v=<?= time() ?>"></script>

    <script>
        function showInstallPage() {
            document.getElementById("root").innerHTML = `
                <div style="max-width: 800px; margin: 50px auto; padding: 40px; background: white; border-radius: 15px;">
                    <h1>üöÄ Flowtask</h1>
                    <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±—É—é –∑–∞–¥–∞—á—É –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–∫–ª–∞–¥–∫—É "–ü—Ä–æ—Ü–µ—Å—Å—ã".</p>
                </div>
            `;
            BX24.fitWindow();
        }

        BX24.init(function() {
            console.log('üöÄ Flowtask');

            const placement = BX24.placement.info();

            if (placement?.placement === "DEFAULT") {
                showInstallPage();
                return;
            }

            const taskId = placement?.options?.taskId || placement?.options?.ID;

            if (!taskId) {
                document.getElementById("root").innerHTML =
                    "<div class=\"loading\">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–¥–∞—á–∏</div>";
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BX.PULL –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (typeof BX !== 'undefined' && typeof BX.PULL !== 'undefined') {
                BX.PULL.start();
                console.log('‚úÖ Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
            }

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –õ–Æ–ë–û–ô –∑–∞–¥–∞—á–∏
            BX24.callBind('ONTASKUPDATE', function(data) {
                console.log('üì® ONTASKUPDATE —Å–æ–±—ã—Ç–∏–µ:', data);

                // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
                if (data && data.TASK_ID) {
                    const changedTaskId = parseInt(data.TASK_ID);
                    console.log('üîÑ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', changedTaskId);

                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    BX24.callMethod('tasks.task.get', { taskId: changedTaskId }, function(result) {
                        if (!result.error()) {
                            const task = result.data().task;
                            const newStatus = parseInt(task.status || task.STATUS);

                            console.log('üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏', changedTaskId, ':', newStatus);

                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ canvas (–¥–ª—è –õ–Æ–ë–û–ô –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–ª–æ—Ç–Ω–µ)
                            if (window.FlowCanvasV2 && window.FlowCanvasV2.updateSingleTaskStatus) {
                                window.FlowCanvasV2.updateSingleTaskStatus(changedTaskId, newStatus);
                            }

                            // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ –ò –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
                            if (changedTaskId === taskId && newStatus === 5) {
                                console.log('‚úÖ –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–∑–∞–¥–∞—á...');

                                if (window.TaskHandler && window.TaskHandler.handleTaskComplete) {
                                    window.TaskHandler.handleTaskComplete(taskId, window.currentProcessId);
                                }
                            }
                        }
                    });
                }
            }, false);
            console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ONTASKUPDATE –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á)');

            BX24.callMethod("tasks.task.get", { taskId: taskId }, function(result) {
                if (result.error()) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏:', result.error());
                    document.getElementById("root").innerHTML =
                        "<div class=\"loading\">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏</div>";
                    return;
                }

                const task = result.data().task;
                console.log('‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', task.id, task.title);

                const processId = task.ufFlowtaskProcessId || task.id;
                console.log('üìã Process ID:', processId);

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–û–í–£–Æ –ê–†–•–ò–¢–ï–ö–¢–£–†–£ V2
                if (typeof window.FlowCanvasV2 !== "undefined") {
                    window.currentProcessId = processId;
                    window.currentTaskId = task.id;
                    window.FlowCanvasV2.render();
                    console.log('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º FlowCanvasV2 (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)');
                } else if (typeof window.FlowCanvas !== "undefined") {
                    // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
                    window.FlowCanvas.render(task);
                    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º FlowCanvas (—Å—Ç–∞—Ä–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)');
                } else {
                    console.error("‚ùå FlowCanvas not loaded");
                }
            });

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É iframe
            setTimeout(() => {
                BX24.resizeWindow(window.innerWidth, Math.max(window.innerHeight, 1200));
            }, 500);
        });
    </script>
</body>
</html>
