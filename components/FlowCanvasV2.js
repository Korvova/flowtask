/**
 * FlowCanvasV2 - –ü–†–û–°–¢–û–ô canvas –Ω–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
 *
 * –ó–∞–≥—Ä—É–∑–∫–∞:
 * 1. EntityManagerV2.loadProcess(processId) ‚Üí –º–∞—Å—Å–∏–≤ —É–∑–ª–æ–≤
 * 2. –°—Ç—Ä–æ–∏–º nodes –∏ edges –¥–ª—è ReactFlow
 *
 * –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏:
 * 1. –î–æ–±–∞–≤–ª—è–µ–º –≤ connectionsFrom –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —É–∑–ª–∞
 * 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∑–µ–ª
 *
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏:
 * 1. TaskHandler.handleTaskComplete(taskId, processId)
 */
window.FlowCanvasV2 = {

    currentProcessId: null,
    reactFlowInstance: null,

    render: function() {
        const RF = window.ReactFlow || window.reactflow;

        if (!React || !RF) {
            console.error('React –∏–ª–∏ ReactFlow –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return;
        }

        const { useState, useCallback, useEffect, useRef } = React;
        const { ReactFlow, Controls, Background, addEdge: rfAddEdge } = RF;

        // –ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–∑–ª–∞ –∑–∞–¥–∞—á–∏
        function TaskNodeComponent({ data, id }) {
            const statusColor = window.StatusColors ? window.StatusColors.getColor(data.status) : '#0066cc';

            const handleAddFuture = (e) => {
                e.stopPropagation();
                console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è —É–∑–ª–∞:', id);

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
                if (window.TaskModalV2) {
                    window.TaskModalV2.open({
                        sourceNodeId: id,
                        processId: window.currentProcessId,
                        onSave: () => {
                            console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º canvas');
                            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å canvas
                            window.location.reload();
                        }
                    });
                }
            };

            return React.createElement('div', {
                style: {
                    padding: '15px 20px',
                    background: 'white',
                    border: `3px solid ${statusColor}`,
                    borderRadius: '8px',
                    minWidth: '200px',
                    boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                    cursor: 'pointer',
                    position: 'relative'
                }
            }, [
                React.createElement('div', {
                    key: 'title',
                    style: {
                        fontSize: '14px',
                        fontWeight: 'bold',
                        color: '#333',
                        marginBottom: '5px'
                    }
                }, data.title || '–ó–∞–¥–∞—á–∞'),
                data.status ? React.createElement('div', {
                    key: 'status',
                    style: {
                        fontSize: '12px',
                        color: '#666',
                        marginTop: '5px'
                    }
                }, `–°—Ç–∞—Ç—É—Å: ${data.status}`) : null,
                // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è task —É–∑–ª–æ–≤)
                data.isRealTask ? React.createElement('button', {
                    key: 'add-btn',
                    onClick: handleAddFuture,
                    style: {
                        marginTop: '10px',
                        padding: '5px 10px',
                        background: '#0066cc',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '12px',
                        width: '100%'
                    }
                }, '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É') : null
            ]);
        }

        function FlowApp() {
            const [nodes, setNodes] = useState([]);
            const [edges, setEdges] = useState([]);
            const [loading, setLoading] = useState(true);
            const reactFlowInstanceRef = useRef(null);

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            useEffect(() => {
                loadProcessData();
            }, []);

            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            const loadProcessData = async () => {
                try {
                    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å:', window.currentProcessId);

                    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —É–∑–ª—ã –∑–∞ 1 –∑–∞–ø—Ä–æ—Å
                    let allNodes = await EntityManagerV2.loadProcess(window.currentProcessId);
                    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–∑–ª–æ–≤:', allNodes.length);

                    // –ï—Å–ª–∏ —É–∑–ª–æ–≤ –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º —É–∑–µ–ª –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
                    if (allNodes.length === 0 && window.currentTaskId) {
                        console.log('üìù –°–æ–∑–¥–∞—ë–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É–∑–µ–ª –¥–ª—è –∑–∞–¥–∞—á–∏', window.currentTaskId);

                        const initialNode = {
                            nodeId: 'task-' + window.currentTaskId,
                            type: 'task',
                            title: '–ó–∞–¥–∞—á–∞ #' + window.currentTaskId,
                            status: 2, // –í —Ä–∞–±–æ—Ç–µ
                            positionX: 400,
                            positionY: 300,
                            connectionsFrom: [],
                            connectionsTo: [],
                            realTaskId: window.currentTaskId
                        };

                        await EntityManagerV2.saveNode(window.currentProcessId, initialNode);
                        console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π —É–∑–µ–ª —Å–æ–∑–¥–∞–Ω');

                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∑–ª—ã
                        allNodes = await EntityManagerV2.loadProcess(window.currentProcessId);
                        console.log('‚úÖ –£–∑–ª–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è:', allNodes.length);
                    }

                    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å nodes –¥–ª—è ReactFlow
                    const rfNodes = allNodes.map(node => ({
                        id: node.nodeId,
                        type: node.type === 'task' ? 'task' : 'future',
                        position: {
                            x: node.positionX || 0,
                            y: node.positionY || 0
                        },
                        data: {
                            title: node.title,
                            status: node.status,
                            isRealTask: node.type === 'task',
                            isFuture: node.type === 'future',
                            condition: node.condition,
                            realTaskId: node.realTaskId,
                            _node: node  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —É–∑–µ–ª
                        }
                    }));

                    // –ü–æ—Å—Ç—Ä–æ–∏—Ç—å edges –¥–ª—è ReactFlow
                    const rfEdges = [];
                    allNodes.forEach(node => {
                        if (node.connectionsFrom) {
                            node.connectionsFrom.forEach(conn => {
                                rfEdges.push({
                                    id: `edge-${node.nodeId}-${conn.id}`,
                                    source: node.nodeId,
                                    target: conn.id,
                                    type: 'default',
                                    animated: false
                                });
                            });
                        }
                    });

                    console.log('‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–æ nodes:', rfNodes.length, 'edges:', rfEdges.length);

                    setNodes(rfNodes);
                    setEdges(rfEdges);
                    setLoading(false);

                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                    setLoading(false);
                }
            };

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π nodes
            const onNodesChange = useCallback((changes) => {
                setNodes((nds) => {
                    const updated = [...nds];
                    changes.forEach(change => {
                        if (change.type === 'position' && change.dragging === false) {
                            // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
                            const node = updated.find(n => n.id === change.id);
                            if (node && change.position) {
                                saveNodePosition(node.id, change.position.x, change.position.y);
                            }
                        }
                    });
                    return updated.map(node => {
                        const change = changes.find(c => c.id === node.id);
                        if (change) {
                            if (change.type === 'position') {
                                return { ...node, position: change.position || node.position };
                            }
                        }
                        return node;
                    });
                });
            }, []);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π edges
            const onEdgesChange = useCallback((changes) => {
                // –ù–µ —É–¥–∞–ª—è–µ–º edges —á–µ—Ä–µ–∑ UI, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
            }, []);

            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏
            const onConnect = useCallback(async (connection) => {
                console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏:', connection.source, '‚Üí', connection.target);

                try {
                    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —É–∑–ª—ã
                    const allNodes = await EntityManagerV2.loadProcess(window.currentProcessId);
                    const sourceNode = allNodes.find(n => n.nodeId === connection.source);
                    const targetNode = allNodes.find(n => n.nodeId === connection.target);

                    if (!sourceNode) {
                        console.error('‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        return;
                    }

                    // –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å
                    if (!sourceNode.connectionsFrom) {
                        sourceNode.connectionsFrom = [];
                    }

                    sourceNode.connectionsFrom.push({
                        type: targetNode?.type || 'future',
                        id: connection.target
                    });

                    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    await EntityManagerV2.saveNode(window.currentProcessId, sourceNode);
                    console.log('‚úÖ –°–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');

                    // –û–±–Ω–æ–≤–∏—Ç—å edges
                    setEdges((eds) => [
                        ...eds,
                        {
                            id: `edge-${connection.source}-${connection.target}`,
                            source: connection.source,
                            target: connection.target,
                            type: 'default'
                        }
                    ]);

                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏:', error);
                }
            }, []);

            // –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ –≤ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
            let connectingNodeId = null;

            const onConnectStart = useCallback((event, { nodeId }) => {
                connectingNodeId = nodeId;
                console.log('üîó –ù–∞—á–∞–ª–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç:', nodeId);
            }, []);

            const onConnectEnd = useCallback((event) => {
                const target = event.target;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—É—Å—Ç–∏–ª–∏ –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
                if (target.classList.contains('react-flow__pane') && connectingNodeId) {
                    console.log('‚úÖ –û—Ç–ø—É—Å—Ç–∏–ª–∏ –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ! –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É');

                    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏
                    const reactFlowBounds = document.querySelector('.react-flow').getBoundingClientRect();
                    const position = reactFlowInstanceRef.current.project({
                        x: event.clientX - reactFlowBounds.left,
                        y: event.clientY - reactFlowBounds.top,
                    });

                    // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
                    if (window.TaskModal) {
                        window.TaskModal.open('future', position, connectingNodeId);
                    }
                }

                connectingNodeId = null;
            }, []);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–∞
            const saveNodePosition = async (nodeId, x, y) => {
                try {
                    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é:', nodeId, x, y);

                    const allNodes = await EntityManagerV2.loadProcess(window.currentProcessId);
                    const node = allNodes.find(n => n.nodeId === nodeId);

                    if (node) {
                        node.positionX = x;
                        node.positionY = y;
                        await EntityManagerV2.saveNode(window.currentProcessId, node);
                        console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', error);
                }
            };

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
            const handleStatusChange = useCallback(async (taskId, newStatus) => {
                console.log('üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω:', taskId, '‚Üí', newStatus);

                // –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ
                setNodes((nds) =>
                    nds.map(node => {
                        if (node.id === 'task-' + taskId) {
                            return {
                                ...node,
                                data: {
                                    ...node.data,
                                    status: newStatus,
                                    _updateTime: Date.now()
                                }
                            };
                        }
                        return node;
                    })
                );

                // –ï—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
                if (newStatus === 5) {
                    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏...');
                    await TaskHandler.handleTaskComplete(taskId, window.currentProcessId);

                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å canvas
                    setTimeout(() => {
                        loadProcessData();
                    }, 1000);
                }
            }, []);

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ BX.PULL (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
            useEffect(() => {
                if (nodes.length === 0) return; // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —É–∑–ª–æ–≤

                if (window.PullSubscription) {
                    // –ù–∞–π—Ç–∏ –≤—Å–µ task —É–∑–ª—ã
                    nodes.forEach(node => {
                        if (node.type === 'task') {
                            const taskId = node.id.replace('task-', '');

                            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è PullSubscription.subscribe:
                            // subscribe(taskId, onStatusChange, onTaskComplete)
                            window.PullSubscription.subscribe(
                                taskId,
                                (newStatus, task) => {
                                    console.log('üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω —á–µ—Ä–µ–∑ PULL:', taskId, '‚Üí', newStatus);
                                    handleStatusChange(taskId, newStatus);
                                },
                                (completedTaskId) => {
                                    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ PULL:', completedTaskId);
                                    handleStatusChange(completedTaskId, 5);
                                }
                            );
                        }
                    });
                }

                // Cleanup: –æ—Ç–ø–∏—Å–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                return () => {
                    if (window.PullSubscription) {
                        nodes.forEach(node => {
                            if (node.type === 'task') {
                                const taskId = node.id.replace('task-', '');
                                window.PullSubscription.unsubscribe(taskId);
                            }
                        });
                    }
                };
            }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –ø–æ–¥–ø–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!

            // Render
            if (loading) {
                return React.createElement('div', {
                    style: {
                        width: '100%',
                        height: '100vh',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                    }
                }, '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...');
            }

            return React.createElement('div', {
                style: {
                    width: '100%',
                    height: '100vh',
                    background: '#f5f7fa'
                }
            },
                React.createElement(ReactFlow, {
                    nodes: nodes,
                    edges: edges,
                    nodesDraggable: true,
                    onNodesChange: onNodesChange,
                    onEdgesChange: onEdgesChange,
                    onConnect: onConnect,
                    onConnectStart: onConnectStart,
                    onConnectEnd: onConnectEnd,
                    onInit: (instance) => {
                        reactFlowInstanceRef.current = instance;
                        console.log('‚úÖ ReactFlow –≥–æ—Ç–æ–≤');
                    },
                    nodeTypes: {
                        task: TaskNodeComponent,
                        future: TaskNodeComponent
                    },
                    fitView: true,
                    minZoom: 0.5,
                    maxZoom: 1.5,
                    connectionMode: 'loose'
                },
                    React.createElement(Controls),
                    React.createElement(Background, {
                        variant: 'dots',
                        gap: 12,
                        size: 1,
                        color: '#ddd'
                    })
                )
            );
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(FlowApp));

        console.log('‚úÖ FlowCanvasV2 rendered');
    },

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑–≤–Ω–µ
    reloadCanvas: function() {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ canvas...');
        this.render();
    }
};

console.log('‚úÖ FlowCanvasV2 loaded');
