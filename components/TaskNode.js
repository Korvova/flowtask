/**
 * TaskNode - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è React Flow
 */
window.TaskNode = function({ id, data, selected }) {
    const React = window.React;
    const { Handle, Position } = window.ReactFlow || window.reactflow || {};

    if (!Handle) {
        console.error('Handle –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ReactFlow');
        return null;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏
    const isFuture = data.isFuture === true;
    const isRealTask = !isFuture;

    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
    const getBackgroundColor = () => {
        if (isFuture) {
            // –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ - —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π
            return '#4b5563';
        }

        if (isRealTask && data.statusCode) {
            // –†–µ–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ - —Ü–≤–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É
            return window.StatusColors.getColor(data.statusCode);
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
        return '#e5e7eb';
    };

    // –ò–∫–æ–Ω–∫–∞
    const icon = isFuture ? 'üéØ' : 'üìã';

    // –°—Ç–∏–ª—å —Ä–∞–º–∫–∏
    const borderStyle = isFuture ? '2px dashed #9ca3af' : '1px solid #d1d5db';

    // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    const textColor = isFuture ? '#ffffff' : '#1f2937';

    // –°—Ç–∏–ª—å —É–∑–ª–∞
    const nodeStyle = {
        background: getBackgroundColor(),
        border: selected ? '2px solid #667eea' : borderStyle,
        borderRadius: '10px',
        padding: '14px',
        paddingTop: '32px', // –ë–æ–ª—å—à–µ –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
        minWidth: '220px',
        maxWidth: '280px',
        boxShadow: selected ? '0 8px 16px rgba(0, 0, 0, 0.2)' : '0 4px 6px rgba(0, 0, 0, 0.1)',
        color: textColor,
        fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif',
        transition: 'all 0.3s ease',
        position: 'relative'
    };

    // –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const headerStyle = {
        display: 'flex',
        alignItems: 'center',
        gap: '8px',
        marginBottom: '10px',
        fontSize: '18px'
    };

    // –°—Ç–∏–ª—å –Ω–∞–∑–≤–∞–Ω–∏—è
    const titleStyle = {
        fontWeight: '600',
        fontSize: '14px',
        marginBottom: '6px',
        lineHeight: '1.4',
        wordBreak: 'break-word'
    };

    // –°—Ç–∏–ª—å –±–µ–π–¥–∂–∞
    const badgeStyle = {
        display: 'inline-block',
        padding: '3px 8px',
        borderRadius: '4px',
        fontSize: '11px',
        fontWeight: '500',
        background: isFuture ? 'rgba(255,255,255,0.2)' : 'rgba(0,0,0,0.1)',
        marginTop: '6px'
    };

    // –°—Ç–∏–ª—å –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const statusStyle = {
        fontSize: '12px',
        opacity: 0.9,
        marginTop: '4px'
    };

    // –°—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö—É)
    const editButtonStyle = {
        position: 'absolute',
        top: '6px',
        left: '8px',
        background: 'rgba(102, 126, 234, 0.9)',
        color: 'white',
        border: 'none',
        borderRadius: '4px',
        width: '24px',
        height: '24px',
        fontSize: '14px',
        cursor: 'pointer',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        transition: 'all 0.2s ease',
        zIndex: 10
    };

    // –°—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É)
    const deleteButtonStyle = {
        position: 'absolute',
        top: '6px',
        right: '8px',
        background: 'rgba(239, 68, 68, 0.9)',
        color: 'white',
        border: 'none',
        borderRadius: '4px',
        width: '24px',
        height: '24px',
        fontSize: '14px',
        cursor: 'pointer',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        transition: 'all 0.2s ease',
        zIndex: 10
    };

    // –°—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è (–¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á)
    const openButtonStyle = {
        position: 'absolute',
        top: '6px',
        right: '8px',
        background: 'rgba(102, 126, 234, 0.9)',
        color: 'white',
        border: 'none',
        borderRadius: '4px',
        width: '24px',
        height: '24px',
        fontSize: '14px',
        cursor: 'pointer',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        transition: 'all 0.2s ease',
        zIndex: 10
    };

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è —Å–æ–∑–¥–∞–Ω–∏—è
    const getConditionName = (conditionType) => {
        const conditions = {
            'immediately': '‚ö° –°—Ä–∞–∑—É',
            'delay': '‚è∞ –° –∑–∞–¥–µ—Ä–∂–∫–æ–π',
            'ifCancel_cancel': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
            'ifCancel_create': '‚úÖ –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ'
        };
        return conditions[conditionType] || '';
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
    const handleDelete = (e) => {
        e.stopPropagation();
        console.log('üî¥ handleDelete –≤—ã–∑–≤–∞–Ω –≤ TaskNode, id:', id);
        if (data.onDelete) {
            console.log('üî¥ –í—ã–∑—ã–≤–∞–µ–º data.onDelete()');
            data.onDelete();
        } else {
            console.warn('‚ö†Ô∏è data.onDelete –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω!');
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleEdit = (e) => {
        e.stopPropagation();
        console.log('‚úèÔ∏è handleEdit –≤—ã–∑–≤–∞–Ω –≤ TaskNode, id:', id);
        if (data.onEdit) {
            console.log('‚úèÔ∏è –í—ã–∑—ã–≤–∞–µ–º data.onEdit()');
            data.onEdit(data);
        } else {
            console.warn('‚ö†Ô∏è data.onEdit –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω!');
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ –≤ Bitrix24 (–¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á)
    const handleOpen = (e) => {
        e.stopPropagation();
        const taskId = typeof data.id === 'string' ? data.id.replace('task-', '') : data.id;
        console.log('üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É Bitrix24:', taskId);

        if (typeof BX24 !== 'undefined' && BX24.openPath) {
            BX24.openPath('/company/personal/user/1/tasks/task/view/' + taskId + '/');
        } else {
            console.warn('BX24.openPath –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    };

    return React.createElement('div', { style: nodeStyle },
        // Handle –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π (—Å–ª–µ–≤–∞)
        React.createElement(Handle, {
            type: 'target',
            position: Position.Left,
            style: {
                background: isFuture ? '#9ca3af' : '#667eea',
                width: '12px',
                height: '12px',
                border: '2px solid white'
            }
        }),

        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–∑–∞–¥–∞—á, —Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö—É)
        isFuture && React.createElement('button', {
            style: editButtonStyle,
            onClick: handleEdit,
            onMouseEnter: (e) => {
                e.target.style.background = 'rgba(85, 104, 211, 1)';
                e.target.style.transform = 'scale(1.1)';
            },
            onMouseLeave: (e) => {
                e.target.style.background = 'rgba(102, 126, 234, 0.9)';
                e.target.style.transform = 'scale(1)';
            },
            title: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É'
        }, '‚úèÔ∏è'),

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–∑–∞–¥–∞—á, —Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É)
        isFuture && React.createElement('button', {
            style: deleteButtonStyle,
            onClick: handleDelete,
            onMouseEnter: (e) => {
                e.target.style.background = 'rgba(220, 38, 38, 1)';
                e.target.style.transform = 'scale(1.1)';
            },
            onMouseLeave: (e) => {
                e.target.style.background = 'rgba(239, 68, 68, 0.9)';
                e.target.style.transform = 'scale(1)';
            },
            title: '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É'
        }, 'üóëÔ∏è'),

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á, —Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É)
        isRealTask && React.createElement('button', {
            style: openButtonStyle,
            onClick: handleOpen,
            onMouseEnter: (e) => {
                e.target.style.background = 'rgba(85, 104, 211, 1)';
                e.target.style.transform = 'scale(1.1)';
            },
            onMouseLeave: (e) => {
                e.target.style.background = 'rgba(102, 126, 234, 0.9)';
                e.target.style.transform = 'scale(1)';
            },
            title: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É –≤ Bitrix24'
        }, 'üìÇ'),

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
        React.createElement('div', { style: headerStyle },
            React.createElement('span', null, icon),
            isFuture && React.createElement('span', {
                style: { fontSize: '12px', opacity: 0.9 }
            }, '–ü—Ä–µ–¥–∑–∞–¥–∞—á–∞')
        ),

        // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        React.createElement('div', { style: titleStyle }, data.title),

        // –°—Ç–∞—Ç—É—Å –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        !isFuture && data.statusCode && React.createElement('div', { style: statusStyle },
            window.StatusColors.getName(data.statusCode)
        ),

        // –£—Å–ª–æ–≤–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–¥–∞—á
        isFuture && data.conditionType && React.createElement('div', { style: badgeStyle },
            getConditionName(data.conditionType),
            data.conditionType === 'delay' && data.delayMinutes &&
                ` (${data.delayMinutes} –º–∏–Ω)`
        ),

        // Handle –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π (—Å–ø—Ä–∞–≤–∞)
        React.createElement(Handle, {
            type: 'source',
            position: Position.Right,
            style: {
                background: isFuture ? '#9ca3af' : '#667eea',
                width: '12px',
                height: '12px',
                border: '2px solid white'
            }
        })
    );
};

console.log('‚úÖ TaskNode component loaded with buttons inside card');
