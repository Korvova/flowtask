/**
 * TaskModalV2 - –ü–†–û–°–¢–ê–Ø –º–æ–¥–∞–ª–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á
 */
window.TaskModalV2 = {

    currentPosition: null,
    currentSourceId: null,
    currentProcessId: null,
    onSaveCallback: null,

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
     * @param {Object|string} params - –û–±—ä–µ–∫—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ —Ç–∏–ø (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     * @param {Object} position - –ü–æ–∑–∏—Ü–∏—è (–µ—Å–ª–∏ params —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞)
     * @param {string} sourceId - ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —É–∑–ª–∞ (–µ—Å–ª–∏ params —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞)
     */
    open: function(params, position, sourceId) {
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: params —ç—Ç–æ –æ–±—ä–µ–∫—Ç { sourceNodeId, processId, position, onSave }
        if (typeof params === 'object' && params.sourceNodeId) {
            this.currentSourceId = params.sourceNodeId;
            this.currentProcessId = params.processId || window.currentProcessId;
            this.onSaveCallback = params.onSave || null;

            // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ —è–≤–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if (params.position) {
                this.currentPosition = params.position;
                this.showPrompt();
            }
            // –ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —É–∑–ª–∞
            else {
                EntityManagerV2.loadProcess(this.currentProcessId).then(nodes => {
                    const sourceNode = nodes.find(n => n.nodeId === this.currentSourceId);

                    // –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–µ–¥–∑–∞–¥–∞—á—É —Å–ø—Ä–∞–≤–∞ –∏ –Ω–∏–∂–µ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π
                    this.currentPosition = {
                        x: (sourceNode?.positionX || 400) + 250,
                        y: (sourceNode?.positionY || 300) + 100
                    };

                    this.showPrompt();
                });
            }
        }
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        else {
            this.currentPosition = position;
            this.currentSourceId = sourceId;
            this.currentProcessId = window.currentProcessId;
            this.onSaveCallback = null;

            this.showPrompt();
        }
    },

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å prompt –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
     */
    showPrompt: function() {
        console.log('üìù –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏');
        console.log('   –ü–æ–∑–∏—Ü–∏—è:', this.currentPosition);
        console.log('   –û—Ç —É–∑–ª–∞:', this.currentSourceId);

        // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π prompt
        const title = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:');
        if (!title) {
            console.log('‚è≠Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ');
            return;
        }

        this.saveFuture(title);
    },

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É
     */
    saveFuture: async function(title) {
        try {
            console.log('üíæ –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É:', title);

            const futureId = 'future-' + Date.now();
            const processId = this.currentProcessId || window.currentProcessId;

            // –°–æ–∑–¥–∞—Ç—å —É–∑–µ–ª –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
            const futureNode = {
                nodeId: futureId,
                type: 'future',
                title: title,
                description: '',
                condition: 'immediately',
                realTaskId: null,
                responsibleId: 1,
                groupId: 0,
                positionX: this.currentPosition.x,
                positionY: this.currentPosition.y,
                connectionsFrom: [],
                connectionsTo: [
                    { type: 'task', id: this.currentSourceId }
                ]
            };

            await EntityManagerV2.saveNode(processId, futureNode);
            console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', futureId);

            // –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —É–∑–ª—É
            const allNodes = await EntityManagerV2.loadProcess(processId);
            const sourceNode = allNodes.find(n => n.nodeId === this.currentSourceId);

            if (sourceNode) {
                if (!sourceNode.connectionsFrom) {
                    sourceNode.connectionsFrom = [];
                }

                sourceNode.connectionsFrom.push({
                    type: 'future',
                    id: futureId
                });

                await EntityManagerV2.saveNode(processId, sourceNode);
                console.log('‚úÖ –°–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω–∞');
            }

            // –í—ã–∑–≤–∞—Ç—å callback –µ—Å–ª–∏ –µ—Å—Ç—å
            if (this.onSaveCallback) {
                console.log('üìû –í—ã–∑—ã–≤–∞–µ–º onSave callback');
                this.onSaveCallback(futureId);
            }
            // –ò–Ω–∞—á–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å canvas
            else if (window.FlowCanvasV2) {
                console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º canvas');
                window.FlowCanvasV2.reloadCanvas();
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:', error);
            alert('–û—à–∏–±–∫–∞: ' + error);
        }
    }
};

console.log('‚úÖ TaskModalV2 loaded');
