/**
 * TaskModalV2 - –ü–†–û–°–¢–ê–Ø –º–æ–¥–∞–ª–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á
 */
window.TaskModalV2 = {

    currentPosition: null,
    currentSourceId: null,

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É
     */
    open: function(type, position, sourceId) {
        this.currentPosition = position;
        this.currentSourceId = sourceId;

        console.log('üìù –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', type);
        console.log('   –ü–æ–∑–∏—Ü–∏—è:', position);
        console.log('   –û—Ç —É–∑–ª–∞:', sourceId);

        // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π prompt
        const title = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:');
        if (!title) {
            console.log('‚è≠Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ');
            return;
        }

        this.saveFuture(title);
    },

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É
     */
    saveFuture: async function(title) {
        try {
            console.log('üíæ –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É:', title);

            const futureId = 'future-' + Date.now();

            // –°–æ–∑–¥–∞—Ç—å —É–∑–µ–ª –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
            const futureNode = {
                nodeId: futureId,
                type: 'future',
                title: title,
                description: '',
                condition: 'immediately',
                realTaskId: null,
                responsibleId: 1,
                groupId: 0,
                positionX: this.currentPosition.x,
                positionY: this.currentPosition.y,
                connectionsFrom: [],
                connectionsTo: [
                    { type: 'task', id: this.currentSourceId }
                ]
            };

            await EntityManagerV2.saveNode(window.currentProcessId, futureNode);
            console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', futureId);

            // –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —É–∑–ª—É
            const allNodes = await EntityManagerV2.loadProcess(window.currentProcessId);
            const sourceNode = allNodes.find(n => n.nodeId === this.currentSourceId);

            if (sourceNode) {
                if (!sourceNode.connectionsFrom) {
                    sourceNode.connectionsFrom = [];
                }

                sourceNode.connectionsFrom.push({
                    type: 'future',
                    id: futureId
                });

                await EntityManagerV2.saveNode(window.currentProcessId, sourceNode);
                console.log('‚úÖ –°–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω–∞');
            }

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å canvas
            if (window.FlowCanvasV2) {
                window.FlowCanvasV2.reloadCanvas();
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:', error);
            alert('–û—à–∏–±–∫–∞: ' + error);
        }
    }
};

console.log('‚úÖ TaskModalV2 loaded');
