/**
 * TaskHandler - –ü–†–û–°–¢–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–¥–∞—á
 *
 * –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏ (status=5):
 * 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —É–∑–µ–ª –∑–∞–¥–∞—á–∏
 * 2. –ù–∞–π—Ç–∏ –≤—Å–µ connectionsFrom –≥–¥–µ type='future'
 * 3. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
 */
window.TaskHandler = {

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
     */
    handleTaskComplete: async function(taskId, processId) {
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üéâ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ID:', taskId);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

        try {
            // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —É–∑–ª—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
            const nodes = await EntityManagerV2.loadProcess(processId);
            console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–∑–ª–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞:', nodes.length);

            // 2. –ù–∞–π—Ç–∏ —É–∑–µ–ª –∑–∞–¥–∞—á–∏
            const taskNode = nodes.find(n => n.nodeId === 'task-' + taskId);
            if (!taskNode) {
                console.log('‚ö†Ô∏è –£–∑–µ–ª task-' + taskId + ' –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log('‚úÖ –ù–∞–π–¥–µ–Ω —É–∑–µ–ª –∑–∞–¥–∞—á–∏:', taskNode.nodeId);
            console.log('üìä –°–≤—è–∑–µ–π –∏—Å—Ö–æ–¥—è—â–∏—Ö:', (taskNode.connectionsFrom || []).length);

            // 3. –ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
            const futureConnections = (taskNode.connectionsFrom || []).filter(
                conn => conn.type === 'future'
            );

            console.log('üìã –ü—Ä–µ–¥–∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', futureConnections.length);

            if (futureConnections.length === 0) {
                console.log('‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–µ–¥–∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è');
                return;
            }

            // 4. –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
            const createdTasks = [];

            for (const conn of futureConnections) {
                const futureId = conn.id;
                console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
                console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É:', futureId);

                // –ù–∞–π—Ç–∏ —É–∑–µ–ª –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
                const futureNode = nodes.find(n => n.nodeId === futureId);
                if (!futureNode) {
                    console.log('‚ö†Ô∏è –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', futureId);
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ
                if (futureNode.realTaskId) {
                    console.log('‚è≠Ô∏è –£–∂–µ —Å–æ–∑–¥–∞–Ω–∞, ID:', futureNode.realTaskId);
                    continue;
                }

                console.log('üìù –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É:', futureNode.title);
                console.log('   –£—Å–ª–æ–≤–∏–µ:', futureNode.condition);

                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
                if (futureNode.condition !== 'immediately') {
                    console.log('‚è≠Ô∏è –£—Å–ª–æ–≤–∏–µ –Ω–µ "immediately", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    continue;
                }

                // –°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
                const newTaskId = await this.createRealTask(
                    futureNode.title,
                    futureNode.description || '',
                    futureNode.responsibleId || 1,
                    futureNode.groupId || 0,
                    processId
                );

                if (!newTaskId) {
                    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É');
                    continue;
                }

                console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ID:', newTaskId);

                // –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É
                futureNode.realTaskId = newTaskId;
                await EntityManagerV2.saveNode(processId, futureNode);

                // –°–æ–∑–¥–∞—Ç—å —É–∑–µ–ª –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
                const newTaskNode = {
                    nodeId: 'task-' + newTaskId,
                    type: 'task',
                    title: futureNode.title,
                    description: futureNode.description || '',
                    status: 2,
                    positionX: futureNode.positionX || 0,
                    positionY: futureNode.positionY || 0,
                    connectionsFrom: futureNode.connectionsFrom || [],
                    connectionsTo: [{ type: 'task', id: taskNode.nodeId }]
                };

                await EntityManagerV2.saveNode(processId, newTaskNode);

                createdTasks.push({
                    futureId: futureId,
                    taskId: newTaskId
                });

                console.log('‚úÖ –£–∑–µ–ª task-' + newTaskId + ' —Å–æ–∑–¥–∞–Ω');
            }

            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á:', createdTasks.length);
            console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

            // –í—ã–∑–≤–∞—Ç—å callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è canvas
            if (window.FlowCanvasV2 && window.FlowCanvasV2.reloadCanvas) {
                console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º FlowCanvasV2...');
                window.FlowCanvasV2.reloadCanvas();
            } else if (window.FlowCanvas && window.FlowCanvas.reloadCanvas) {
                console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º FlowCanvas (—Å—Ç–∞—Ä—ã–π)...');
                window.FlowCanvas.reloadCanvas();
            } else {
                console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ reloadCanvas');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
        }
    },

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Bitrix API
     */
    createRealTask: function(title, description, responsibleId, groupId, processId) {
        return new Promise((resolve) => {
            console.log('üìù –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API:');
            console.log('   –ù–∞–∑–≤–∞–Ω–∏–µ:', title);
            console.log('   –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:', responsibleId);
            console.log('   ProcessId:', processId);

            BX24.callMethod('tasks.task.add', {
                fields: {
                    TITLE: title,
                    DESCRIPTION: description,
                    RESPONSIBLE_ID: responsibleId,
                    GROUP_ID: groupId,
                    UF_FLOWTASK_PROCESS_ID: processId
                }
            }, (result) => {
                if (result.error()) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
                    resolve(null);
                    return;
                }

                const data = result.data();
                let taskId = null;

                // –ò–∑–≤–ª–µ—á—å ID –∑–∞–¥–∞—á–∏
                if (typeof data === 'object' && data.task) {
                    taskId = data.task.id || data.task.ID;
                } else if (typeof data === 'number') {
                    taskId = data;
                } else if (typeof data === 'string') {
                    taskId = parseInt(data);
                }

                console.log('‚úÖ API –≤–µ—Ä–Ω—É–ª ID:', taskId);
                resolve(taskId);
            });
        });
    }
};

console.log('‚úÖ TaskHandler loaded');
