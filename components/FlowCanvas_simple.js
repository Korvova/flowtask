/**
 * FlowCanvas - –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ë–ï–ó –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ entity (–ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–∞–º—è—Ç–∏)
 */
window.FlowCanvas = {
    render: function(task) {
        const React = window.React;
        const ReactDOM = window.ReactDOM;
        const RF = window.ReactFlow || window.reactflow;

        if (!React || !ReactDOM || !RF) {
            console.error('React –∏–ª–∏ ReactFlow –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return;
        }

        const { useState, useCallback, useEffect, useRef } = React;
        const { ReactFlow, Controls, Background, addEdge, applyNodeChanges, applyEdgeChanges } = RF;

        function FlowApp() {
            // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞
            const initialNodes = [{
                id: 'task-' + task.id,
                type: 'taskNode',
                position: { x: 250, y: 100 },
                data: {
                    id: task.id,
                    title: task.title,
                    statusCode: task.status,
                    responsibleId: task.responsibleId,
                    isFuture: false
                }
            }];

            const [nodes, setNodes] = useState(initialNodes);
            const [edges, setEdges] = useState([]);
            const saveTimerRef = useRef(null);

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Pull —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            useEffect(() => {
                console.log('üîî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID:', task.id);

                const setupPullSubscription = function() {
                    if (typeof BX === 'undefined' || typeof BX.PULL === 'undefined') {
                        console.error('‚ùå BX.PULL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                        return false;
                    }

                    console.log('‚úÖ BX.PULL –¥–æ—Å—Ç—É–ø–µ–Ω');

                    if (typeof BX.addCustomEvent !== 'undefined') {
                        BX.addCustomEvent('onPullEvent', function(moduleId, command, params) {
                            if (moduleId === 'tasks' && command === 'task_update') {
                                if (params.TASK_ID == task.id) {
                                    const newStatus = params.AFTER ? params.AFTER.STATUS : null;
                                    
                                    if (newStatus) {
                                        console.log('‚ú® –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:', params.TASK_ID, '‚Üí', newStatus);

                                        setNodes((currentNodes) => {
                                            return currentNodes.map((node) => {
                                                if (node.id === 'task-' + task.id) {
                                                    return {
                                                        ...node,
                                                        data: {
                                                            ...node.data,
                                                            statusCode: newStatus
                                                        }
                                                    };
                                                }
                                                return node;
                                            });
                                        });
                                    }
                                }
                            }
                        });

                        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ onPullEvent —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                        return true;
                    }

                    return false;
                };

                if (!setupPullSubscription()) {
                    setTimeout(setupPullSubscription, 500);
                }

                return () => {
                    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ Pull');
                };
            }, [task.id]);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            const onNodesChange = useCallback((changes) => {
                setNodes((nds) => {
                    const updatedNodes = applyNodeChanges(changes, nds);
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                    changes.forEach(change => {
                        if (change.type === 'position' && change.position && !change.dragging) {
                            console.log('üìç –£–∑–µ–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω:', change.id, change.position);
                            // TODO: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ entity
                        }
                    });
                    
                    return updatedNodes;
                });
            }, []);

            const onEdgesChange = useCallback((changes) => {
                setEdges((eds) => applyEdgeChanges(changes, eds));
            }, []);

            const onConnect = useCallback((connection) => {
                console.log('üîó –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', connection);
                
                const sourceNode = nodes.find(n => n.id === connection.source);
                
                if (!sourceNode) {
                    console.error('–ò—Å—Ö–æ–¥–Ω—ã–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', connection.source);
                    return;
                }

                console.log('üìã –ò—Å—Ö–æ–¥–Ω—ã–π —É–∑–µ–ª:', sourceNode);
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º TaskModal
                if (window.TaskModal) {
                    window.TaskModal.show({
                        sourceNode: sourceNode,
                        connection: {
                            ...connection,
                            sourcePosition: sourceNode.position
                        },
                        onSave: (futureTaskData) => {
                            console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', futureTaskData);
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª –Ω–∞ –ø–æ–ª–æ—Ç–Ω–æ
                            const newNode = {
                                id: futureTaskData.futureId,
                                type: 'taskNode',
                                position: futureTaskData.position,
                                data: {
                                    id: futureTaskData.futureId,
                                    title: futureTaskData.title,
                                    description: futureTaskData.description,
                                    responsibleId: futureTaskData.responsibleId,
                                    groupId: futureTaskData.groupId,
                                    conditionType: futureTaskData.conditionType,
                                    delayMinutes: futureTaskData.delayMinutes,
                                    isFuture: true
                                }
                            };
                            
                            setNodes(prev => [...prev, newNode]);
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º edge
                            const newEdge = {
                                id: 'e-' + connection.source + '-' + futureTaskData.futureId,
                                source: connection.source,
                                target: futureTaskData.futureId,
                                type: 'default'
                            };
                            
                            setEdges(prev => [...prev, newEdge]);
                            
                            console.log('‚úÖ –£–∑–µ–ª –∏ —Å–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–æ–ª–æ—Ç–Ω–æ');
                        }
                    });
                } else {
                    console.error('‚ùå TaskModal –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            }, [nodes]);

            // –¢–∏–ø—ã —É–∑–ª–æ–≤
            const nodeTypes = {
                taskNode: window.TaskNode
            };

            return React.createElement('div', {
                style: {
                    width: '100%',
                    height: '100vh',
                    background: '#f5f7fa'
                }
            },
                React.createElement(ReactFlow, {
                    nodes: nodes,
                    edges: edges,
                    onNodesChange: onNodesChange,
                    onEdgesChange: onEdgesChange,
                    onConnect: onConnect,
                    nodeTypes: nodeTypes,
                    fitView: true,
                    minZoom: 0.5,
                    maxZoom: 1.5,
                    connectionMode: 'loose',
                    defaultEdgeOptions: {
                        type: 'default',
                        animated: false
                    }
                },
                    React.createElement(Controls),
                    React.createElement(Background, {
                        variant: 'dots',
                        gap: 12,
                        size: 1,
                        color: '#ddd'
                    })
                )
            );
        }

        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(FlowApp));

        console.log('‚úÖ FlowCanvas (simple) rendered');
    }
};

console.log('‚úÖ FlowCanvas (simple) component loaded');
