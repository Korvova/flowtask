/**
 * TaskModal - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
 */
window.TaskModal = {
    currentConnectionData: null,
    users: [],
    groups: [],
    editMode: false,
    editingFutureTask: null,

    init: function() {
        console.log('‚úÖ TaskModal initialized');
        this.loadUsers();
        this.loadGroups();
    },

    loadUsers: function() {
        console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        BX24.callMethod('user.get', {
            ACTIVE: true
        }, (result) => {
            if (result.error()) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', result.error());
                return;
            }
            
            this.users = result.data().map(user => ({
                id: user.ID,
                name: user.NAME + ' ' + user.LAST_NAME,
                email: user.EMAIL
            }));
            
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', this.users.length);
            this.updateResponsibleSelect();
        });
    },

    loadGroups: function() {
        console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã/–ø—Ä–æ–µ–∫—Ç—ã...');
        BX24.callMethod('sonet_group.get', {
            ORDER: { NAME: 'ASC' }
        }, (result) => {
            if (result.error()) {
                console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ sonet_group.get, –ø—Ä–æ–±—É–µ–º workgroup.list');
                
                // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                BX24.callMethod('workgroup.list', {
                    SELECT: ['ID', 'NAME']
                }, (result2) => {
                    if (result2.error()) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', result2.error());
                        this.groups = [];
                        return;
                    }
                    
                    this.groups = result2.data().map(group => ({
                        id: group.ID,
                        name: group.NAME
                    }));
                    
                    console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø:', this.groups.length);
                    this.updateGroupSelect();
                });
                return;
            }
            
            this.groups = result.data().map(group => ({
                id: group.ID,
                name: group.NAME
            }));
            
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø:', this.groups.length);
            this.updateGroupSelect();
        });
    },

    updateResponsibleSelect: function() {
        const select = document.getElementById('futureTaskResponsible');
        if (!select) return;
        
        select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ --</option>';
        
        this.users.forEach(user => {
            const option = document.createElement('option');
            option.value = user.id;
            option.textContent = user.name + (user.email ? ' (' + user.email + ')' : '');
            select.appendChild(option);
        });
    },

    updateGroupSelect: function() {
        const select = document.getElementById('futureTaskGroup');
        if (!select) return;
        
        select.innerHTML = '<option value="">-- –ë–µ–∑ –≥—Ä—É–ø–ø—ã --</option>';
        
        this.groups.forEach(group => {
            const option = document.createElement('option');
            option.value = group.id;
            option.textContent = group.name;
            select.appendChild(option);
        });
    },

    show: function(connectionData) {
        this.editMode = false;
        this.editingFutureTask = null;
        this.currentConnectionData = connectionData;

        const modal = document.getElementById('taskModal');
        if (!modal) {
            this.createModal();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã
        this.updateResponsibleSelect();
        this.updateGroupSelect();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫—É
        document.getElementById('modalTitle').textContent = '–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É';
        document.getElementById('saveButton').textContent = '–°–æ–∑–¥–∞—Ç—å';

        document.getElementById('taskModal').style.display = 'flex';
        document.getElementById('futureTaskTitle').focus();
    },

    showEdit: function(futureTaskData) {
        this.editMode = true;
        this.editingFutureTask = futureTaskData;
        this.currentConnectionData = null;

        const modal = document.getElementById('taskModal');
        if (!modal) {
            this.createModal();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç—ã
        this.updateResponsibleSelect();
        this.updateGroupSelect();

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏
        document.getElementById('futureTaskTitle').value = futureTaskData.title || '';
        document.getElementById('futureTaskDescription').value = futureTaskData.description || '';
        document.getElementById('futureTaskGroup').value = futureTaskData.groupId || '';
        document.getElementById('futureTaskResponsible').value = futureTaskData.responsibleId || '';
        document.getElementById('futureTaskCondition').value = futureTaskData.conditionType || 'immediately';
        document.getElementById('futureTaskDelay').value = futureTaskData.delayMinutes || '0';

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫—É
        document.getElementById('modalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É';
        document.getElementById('saveButton').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';

        document.getElementById('taskModal').style.display = 'flex';
        document.getElementById('futureTaskTitle').focus();
    },

    close: function() {
        document.getElementById('taskModal').style.display = 'none';
        this.reset();
    },

    reset: function() {
        document.getElementById('futureTaskTitle').value = '';
        document.getElementById('futureTaskDescription').value = '';
        document.getElementById('futureTaskGroup').value = '';
        document.getElementById('futureTaskResponsible').value = '';
        document.getElementById('futureTaskCondition').value = 'immediately';
        document.getElementById('futureTaskDelay').value = '0';
        this.editMode = false;
        this.editingFutureTask = null;
    },

    save: function() {
        const title = document.getElementById('futureTaskTitle').value.trim();
        const description = document.getElementById('futureTaskDescription').value.trim();
        const groupId = parseInt(document.getElementById('futureTaskGroup').value) || 0;
        const responsibleId = parseInt(document.getElementById('futureTaskResponsible').value) || 0;
        const conditionType = document.getElementById('futureTaskCondition').value;
        const delayMinutes = parseInt(document.getElementById('futureTaskDelay').value) || 0;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!title) {
            alert('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
            return;
        }

        if (!responsibleId) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ');
            return;
        }

        if (this.editMode && this.editingFutureTask) {
            // –†–ï–ñ–ò–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø
            console.log('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É:', this.editingFutureTask.id);

            const updatedData = {
                futureId: this.editingFutureTask.futureId,
                parentTaskId: this.editingFutureTask.parentTaskId,
                title: title,
                description: description,
                groupId: groupId,
                responsibleId: responsibleId,
                conditionType: conditionType,
                delayMinutes: delayMinutes,
                positionX: this.editingFutureTask.positionX,
                positionY: this.editingFutureTask.positionY,
                isCreated: this.editingFutureTask.isCreated || false,
                realTaskId: this.editingFutureTask.realTaskId || null
            };

            // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (this.editingFutureTask.onUpdate) {
                this.editingFutureTask.onUpdate(updatedData);
            }
        } else {
            // –†–ï–ñ–ò–ú –°–û–ó–î–ê–ù–ò–Ø
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏ –∏–∑ currentConnectionData
            const targetPos = this.currentConnectionData.position || { x: 500, y: 300 };
            console.log('üìç –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:', targetPos);

            const futureTaskData = {
                title: title,
                description: description,
                groupId: groupId,
                responsibleId: responsibleId,
                conditionType: conditionType,
                delayMinutes: delayMinutes,
                positionX: targetPos.x,
                positionY: targetPos.y
            };

            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø—Ä–µ–¥–∑–∞–¥–∞—á—É:', futureTaskData);

            // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if (this.currentConnectionData && this.currentConnectionData.onSave) {
                this.currentConnectionData.onSave(futureTaskData);
            }
        }

        this.close();
    },

    createModal: function() {
        const modalHTML = `
            <div id="taskModal" style="display: none; position: fixed; top: 0; left: 0; right: 0; bottom: 0; background: rgba(0,0,0,0.7); z-index: 999999; align-items: center; justify-content: center;">
                <div style="background: white; padding: 30px; border-radius: 10px; max-width: 500px; width: 90%; max-height: 80vh; overflow-y: auto; box-shadow: 0 20px 60px rgba(0,0,0,0.5);">
                    <h2 id="modalTitle" style="margin-bottom: 20px; color: #1f2937;">–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É</h2>
                    
                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 500; color: #374151;">–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ *</label>
                        <input type="text" id="futureTaskTitle" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 5px; font-size: 14px;" />
                    </div>

                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 500; color: #374151;">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                        <textarea id="futureTaskDescription" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" rows="3" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 5px; font-size: 14px; resize: vertical;"></textarea>
                    </div>

                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 500; color: #374151;">–ì—Ä—É–ø–ø–∞/–ü—Ä–æ–µ–∫—Ç</label>
                        <select id="futureTaskGroup" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 5px; font-size: 14px; background: white;">
                            <option value="">-- –ë–µ–∑ –≥—Ä—É–ø–ø—ã --</option>
                        </select>
                    </div>

                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 500; color: #374151;">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π *</label>
                        <select id="futureTaskResponsible" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 5px; font-size: 14px; background: white;">
                            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ --</option>
                        </select>
                    </div>

                    <div style="margin-bottom: 15px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 500; color: #374151;">–£—Å–ª–æ–≤–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è</label>
                        <select id="futureTaskCondition" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 5px; font-size: 14px; background: white;">
                            <option value="immediately">‚ö° –°–æ–∑–¥–∞—Ç—å —Å—Ä–∞–∑—É</option>
                            <option value="delay">‚è∞ –°–æ–∑–¥–∞—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π</option>
                            <option value="ifCancel_cancel">‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ</option>
                            <option value="ifCancel_create">‚úÖ –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ</option>
                        </select>
                    </div>

                    <div style="margin-bottom: 20px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: 500; color: #374151;">–ó–∞–¥–µ—Ä–∂–∫–∞ (–º–∏–Ω—É—Ç—ã)</label>
                        <input type="number" id="futureTaskDelay" value="0" min="0" style="width: 100%; padding: 10px; border: 1px solid #d1d5db; border-radius: 5px; font-size: 14px;" />
                    </div>

                    <div style="display: flex; gap: 10px; justify-content: flex-end;">
                        <button onclick="window.TaskModal.close()" style="padding: 10px 20px; background: #e5e7eb; color: #374151; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; font-weight: 500;">–û—Ç–º–µ–Ω–∞</button>
                        <button id="saveButton" onclick="window.TaskModal.save()" style="padding: 10px 20px; background: #667eea; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px; font-weight: 500;">–°–æ–∑–¥–∞—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHTML);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof BX24 !== 'undefined') {
    BX24.init(() => {
        window.TaskModal.init();
    });
} else {
    console.warn('‚ö†Ô∏è  BX24 –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, TaskModal –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

console.log('‚úÖ TaskModal component loaded with edit mode support');
