/**
 * TaskCreator - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ –ø—Ä–µ–¥–∑–∞–¥–∞—á
 * –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –∏ —Ç.–¥.)
 */
window.TaskCreator = {
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–∑–∞–¥–∞—á
     * @param {number} completedTaskId - ID –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
     * @param {function} onSuccess - Callback –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
     */
    processCompletedTask: async function(completedTaskId, onSuccess) {
        console.log('üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', completedTaskId);
        
        try {
            // 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–≤—è–∑–∏ –æ—Ç —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            const connections = await this.getConnectionsFromTask(completedTaskId);
            console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π:', connections.length);
            
            if (connections.length === 0) {
                console.log('‚ÑπÔ∏è  –ù–µ—Ç —Å–≤—è–∑–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                return;
            }
            
            // 2. –î–ª—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
            const createdTasks = [];
            
            for (const conn of connections) {
                const connData = JSON.parse(conn.DETAIL_TEXT);
                const targetId = connData.targetId;
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∞
                if (!targetId.startsWith('future-')) {
                    continue;
                }
                
                console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É:', targetId);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
                const futureTask = await this.getFutureTask(targetId);
                
                if (!futureTask) {
                    console.warn('‚ö†Ô∏è  –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', targetId);
                    continue;
                }
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
                if (futureTask.data.isCreated) {
                    console.log('‚è≠Ô∏è  –ó–∞–¥–∞—á–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
                const newTaskId = await this.createTaskIfConditionMet(futureTask);
                
                if (newTaskId) {
                    createdTasks.push({
                        futureId: targetId,
                        taskId: newTaskId
                    });
                }
            }
            
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á:', createdTasks.length);
            
            // –í—ã–∑—ã–≤–∞–µ–º callback
            if (onSuccess && createdTasks.length > 0) {
                onSuccess(createdTasks);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
        }
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –æ—Ç –∑–∞–¥–∞—á–∏
     */
    getConnectionsFromTask: function(taskId) {
        return new Promise((resolve) => {
            BX24.callMethod('entity.item.get', {
                ENTITY: 'tflow_conn'
            }, (result) => {
                if (result.error()) {
                    resolve([]);
                    return;
                }
                
                const items = result.data();
                const filtered = items.filter(item => {
                    if (!item.DETAIL_TEXT) return false;
                    try {
                        const data = JSON.parse(item.DETAIL_TEXT);
                        return data.sourceId === 'task-' + taskId;
                    } catch (e) {
                        return false;
                    }
                });
                
                resolve(filtered);
            });
        });
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
     */
    getFutureTask: function(futureId) {
        return new Promise((resolve) => {
            BX24.callMethod('entity.item.get', {
                ENTITY: 'tflow_future'
            }, (result) => {
                if (result.error()) {
                    resolve(null);
                    return;
                }
                
                const items = result.data();
                const found = items.find(item => {
                    if (!item.DETAIL_TEXT) return false;
                    try {
                        const data = JSON.parse(item.DETAIL_TEXT);
                        return data.futureId === futureId;
                    } catch (e) {
                        return false;
                    }
                });
                
                if (found) {
                    resolve({
                        entityId: found.ID,
                        data: JSON.parse(found.DETAIL_TEXT)
                    });
                } else {
                    resolve(null);
                }
            });
        });
    },
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
     */
    createTaskIfConditionMet: async function(futureTask) {
        const condition = futureTask.data.conditionType;
        console.log('üìã –£—Å–ª–æ–≤–∏–µ:', condition);
        
        if (condition === 'immediately') {
            // –°–æ–∑–¥–∞—ë–º —Å—Ä–∞–∑—É
            console.log('‚ö° –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ');
            return await this.createRealTask(futureTask);
            
        } else if (condition === 'delay') {
            // –°–æ–∑–¥–∞—ë–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            const delayMinutes = futureTask.data.delayMinutes || 0;
            console.log('‚è∞ –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑', delayMinutes, '–º–∏–Ω—É—Ç');
            
            setTimeout(() => {
                this.createRealTask(futureTask);
            }, delayMinutes * 60 * 1000);
            
            return null; // –í–µ—Ä–Ω—ë–º null —Ç.–∫. –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∂–µ
            
        } else if (condition === 'ifCancel_create') {
            // –°–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ (–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å)
            console.log('‚è≠Ô∏è  –£—Å–ª–æ–≤–∏–µ "–ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return null;
            
        } else {
            console.warn('‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ:', condition);
            return null;
        }
    },
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
     */
    createRealTask: function(futureTask) {
        const futureData = futureTask.data;
        console.log('üìù –°–æ–∑–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É:', futureData.title);

        return new Promise((resolve) => {
            BX24.callMethod('tasks.task.add', {
                fields: {
                    TITLE: futureData.title,
                    DESCRIPTION: futureData.description || '',
                    RESPONSIBLE_ID: futureData.responsibleId,
                    GROUP_ID: futureData.groupId || 0
                }
            }, (result) => {
                if (result.error()) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
                    resolve(null);
                    return;
                }

                const newTaskId = result.data();
                console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! ID:', newTaskId);

                // 1. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É –≤ Entity
                this.markFutureAsCreated(futureTask.entityId, futureData, newTaskId)
                    .then(() => {
                        // 2. –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å –º–µ–∂–¥—É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π –∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π
                        return this.createConnectionForRealTask(futureData.parentTaskId, newTaskId, futureTask.futureId);
                    })
                    .then(() => {
                        console.log('‚úÖ –°–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏');
                        resolve(newTaskId);
                    })
                    .catch((error) => {
                        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                        resolve(newTaskId);
                    });
            });
        });
    },

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
     */
    createConnectionForRealTask: function(parentTaskId, newTaskId, futureId) {
        return new Promise((resolve, reject) => {
            console.log('üîó –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å –¥–ª—è –∑–∞–¥–∞—á–∏:', newTaskId, '–æ—Ç –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:', futureId);

            BX24.callMethod('entity.item.get', {
                ENTITY: 'tflow_conn'
            }, (result) => {
                if (result.error()) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–µ–π:', result.error());
                    reject(result.error());
                    return;
                }

                const connections = result.data();
                const futureConnections = connections.filter(conn => {
                    if (!conn.DETAIL_TEXT) return false;
                    try {
                        const data = JSON.parse(conn.DETAIL_TEXT);
                        return data.targetId === futureId;
                    } catch (e) {
                        return false;
                    }
                });

                console.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π —Å –ø—Ä–µ–¥–∑–∞–¥–∞—á–µ–π:', futureConnections.length);

                if (futureConnections.length === 0) {
                    console.log('‚ÑπÔ∏è  –ù–µ—Ç —Å–≤—è–∑–µ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
                    resolve();
                    return;
                }

                const promises = futureConnections.map(conn => {
                    const connData = JSON.parse(conn.DETAIL_TEXT);

                    const newConnectionData = {
                        sourceId: connData.sourceId,
                        targetId: 'task-' + newTaskId,
                        connectionType: 'task'
                    };

                    return new Promise((res) => {
                        BX24.callMethod('entity.item.add', {
                            ENTITY: 'tflow_conn',
                            NAME: 'conn_' + connData.sourceId.replace(/[^a-zA-Z0-9]/g, '_') + '_task' + newTaskId,
                            DETAIL_TEXT: JSON.stringify(newConnectionData)
                        }, (addResult) => {
                            if (addResult.error()) {
                                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏:', addResult.error());
                            } else {
                                console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å:', connData.sourceId, '‚Üí', 'task-' + newTaskId);
                            }
                            res();
                        });
                    });
                });

                Promise.all(promises).then(() => resolve()).catch(() => resolve());
            });
        });
    },
    
    /**
     * –ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω—É—é
     */
    markFutureAsCreated: function(entityId, futureData, realTaskId) {
        return new Promise((resolve, reject) => {
            futureData.isCreated = true;
            futureData.realTaskId = realTaskId;
            
            BX24.callMethod('entity.item.update', {
                ENTITY: 'tflow_future',
                ID: entityId,
                DETAIL_TEXT: JSON.stringify(futureData)
            }, (result) => {
                if (result.error()) {
                    reject(result.error());
                } else {
                    console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–Ω–∞—è');
                    resolve();
                }
            });
        });
    }
};

console.log('‚úÖ TaskCreator component loaded');
