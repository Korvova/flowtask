/**
 * FlowCanvas - –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–ª–æ—Ç–Ω–∞ React Flow
 * –í–ê–ñ–ù–û: Entity names ‚â§20 chars (Bitrix24 limitation)
 */
window.FlowCanvas = {
    render: function(task) {
        const React = window.React;
        const ReactDOM = window.ReactDOM;
        const RF = window.ReactFlow || window.reactflow;

        if (!React || !ReactDOM || !RF) {
            console.error('React –∏–ª–∏ ReactFlow –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return;
        }

        const { useState, useCallback, useEffect } = React;
        const { ReactFlow, Controls, Background, addEdge, applyNodeChanges, applyEdgeChanges } = RF;

        // –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        function FlowApp() {
            const [nodes, setNodes] = useState([]);
            const [edges, setEdges] = useState([]);
            const [isLoading, setIsLoading] = useState(true);

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            useEffect(() => {
                console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ID:', task.id);
                loadProcessData();
            }, [task.id]);

            // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞
            const loadProcessData = async () => {
                try {
                    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
                    const taskPosition = await loadTaskPosition(task.id);

                    // 2. –°–æ–∑–¥–∞—ë–º —É–∑–µ–ª —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
                    const mainNode = {
                        id: 'task-' + task.id,
                        type: 'taskNode',
                        position: taskPosition || { x: 250, y: 100 },
                        data: {
                            id: task.id,
                            title: task.title,
                            statusCode: task.status,
                            responsibleId: task.responsibleId,
                            isFuture: false,
                            isRealTask: true
                        }
                    };

                    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏ (future tasks)
                    const futureTasks = await loadFutureTasks(task.id);
                    const futureNodes = futureTasks.map(ft => ({
                        id: ft.futureId,
                        type: 'taskNode',
                        position: { x: parseFloat(ft.positionX), y: parseFloat(ft.positionY) },
                        data: {
                            id: ft.futureId,
                            title: ft.title,
                            description: ft.description,
                            isFuture: true,
                            isRealTask: false,
                            conditionType: ft.conditionType
                        }
                    }));

                    // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ (connections)
                    const connections = await loadConnections(task.id);
                    const loadedEdges = connections.map(conn => ({
                        id: 'edge-' + conn.sourceId + '-' + conn.targetId,
                        source: conn.sourceId,
                        target: conn.targetId,
                        type: conn.connectionType === 'future' ? 'default' : 'default',
                        className: conn.connectionType === 'future' ? 'future-edge' : ''
                    }));

                    setNodes([mainNode, ...futureNodes]);
                    setEdges(loadedEdges);
                    setIsLoading(false);

                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                        nodes: [mainNode, ...futureNodes].length,
                        edges: loadedEdges.length
                    });

                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
                    setNodes([{
                        id: 'task-' + task.id,
                        type: 'taskNode',
                        position: { x: 250, y: 100 },
                        data: {
                            id: task.id,
                            title: task.title,
                            statusCode: task.status,
                            responsibleId: task.responsibleId,
                            isFuture: false,
                            isRealTask: true
                        }
                    }]);
                    setIsLoading(false);
                }
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ entity
            const loadTaskPosition = (taskId) => {
                return new Promise((resolve) => {
                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_task_pos',
                        FILTER: {
                            PROPERTY_taskId: taskId.toString()
                        }
                    }, (result) => {
                        if (result.error()) {
                            console.warn('–ü–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º default');
                            resolve(null);
                        } else {
                            const items = result.data();
                            if (items.length > 0) {
                                const item = items[0];
                                resolve({
                                    x: parseFloat(item.PROPERTY_VALUES.positionX),
                                    y: parseFloat(item.PROPERTY_VALUES.positionY)
                                });
                            } else {
                                resolve(null);
                            }
                        }
                    });
                });
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–∑–∞–¥–∞—á –∏–∑ entity
            const loadFutureTasks = (taskId) => {
                return new Promise((resolve) => {
                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_future_task',
                        FILTER: {
                            // –ò—â–µ–º –≤—Å–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏ –≥–¥–µ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ = –Ω–∞—à–∞
                            // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ parentTaskId –≤ entity
                        }
                    }, (result) => {
                        if (result.error()) {
                            console.warn('–ü—Ä–µ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                            resolve([]);
                        } else {
                            const items = result.data();
                            const futureTasks = items.map(item => ({
                                futureId: item.PROPERTY_VALUES.futureId,
                                title: item.PROPERTY_VALUES.title,
                                description: item.PROPERTY_VALUES.description,
                                groupId: item.PROPERTY_VALUES.groupId,
                                responsibleId: item.PROPERTY_VALUES.responsibleId,
                                conditionType: item.PROPERTY_VALUES.conditionType,
                                delayMinutes: item.PROPERTY_VALUES.delayMinutes,
                                positionX: item.PROPERTY_VALUES.positionX,
                                positionY: item.PROPERTY_VALUES.positionY,
                                isCreated: item.PROPERTY_VALUES.isCreated === 'true',
                                realTaskId: item.PROPERTY_VALUES.realTaskId
                            }));
                            resolve(futureTasks);
                        }
                    });
                });
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–µ–π –∏–∑ entity
            const loadConnections = (taskId) => {
                return new Promise((resolve) => {
                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_connections',
                        FILTER: {
                            // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–∞–¥–∞—á–µ
                        }
                    }, (result) => {
                        if (result.error()) {
                            console.warn('–°–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                            resolve([]);
                        } else {
                            const items = result.data();
                            const connections = items.map(item => ({
                                sourceId: item.PROPERTY_VALUES.sourceId,
                                targetId: item.PROPERTY_VALUES.targetId,
                                connectionType: item.PROPERTY_VALUES.connectionType
                            }));
                            resolve(connections);
                        }
                    });
                });
            };

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–∞ (—Å debounce)
            let savePositionTimeout = null;
            const saveNodePosition = (nodeId, position) => {
                clearTimeout(savePositionTimeout);
                savePositionTimeout = setTimeout(() => {
                    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —É–∑–ª–∞:', nodeId, position);

                    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'task-')
                    if (nodeId.startsWith('task-')) {
                        const taskId = nodeId.replace('task-', '');

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
                        BX24.callMethod('entity.item.get', {
                            ENTITY: 'tflow_task_pos',
                            FILTER: {
                                PROPERTY_taskId: taskId
                            }
                        }, (getResult) => {
                            if (getResult.error()) {
                                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏:', getResult.error());
                                return;
                            }

                            const items = getResult.data();

                            if (items.length > 0) {
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                                const itemId = items[0].ID;
                                BX24.callMethod('entity.item.update', {
                                    ENTITY: 'tflow_task_pos',
                                    ID: itemId,
                                    PROPERTY_VALUES: {
                                        positionX: position.x.toString(),
                                        positionY: position.y.toString()
                                    }
                                }, (updateResult) => {
                                    if (updateResult.error()) {
                                        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', updateResult.error());
                                    } else {
                                        console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                                    }
                                });
                            } else {
                                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
                                BX24.callMethod('entity.item.add', {
                                    ENTITY: 'tflow_task_pos',
                                    NAME: 'Position for task ' + taskId,
                                    PROPERTY_VALUES: {
                                        taskId: taskId,
                                        positionX: position.x.toString(),
                                        positionY: position.y.toString()
                                    }
                                }, (addResult) => {
                                    if (addResult.error()) {
                                        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', addResult.error());
                                    } else {
                                        console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', addResult.data());
                                    }
                                });
                            }
                        });
                    }
                    // TODO: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–µ–¥–∑–∞–¥–∞—á
                }, 500); // Debounce 500ms
            };

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É–∑–ª–æ–≤
            const onNodesChange = useCallback((changes) => {
                setNodes((nds) => {
                    const updatedNodes = applyNodeChanges(changes, nds);

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
                    changes.forEach(change => {
                        if (change.type === 'position' && change.position && !change.dragging) {
                            saveNodePosition(change.id, change.position);
                        }
                    });

                    return updatedNodes;
                });
            }, []);

            const onEdgesChange = useCallback((changes) => {
                setEdges((eds) => applyEdgeChanges(changes, eds));
            }, []);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–≤—è–∑–∏
            const onConnect = useCallback((connection) => {
                console.log('üîó –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', connection);

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
                if (typeof window.TaskModal !== 'undefined') {
                    window.TaskModal.show({
                        sourceId: connection.source,
                        targetId: connection.target,
                        taskId: task.id,
                        onSave: (futureTaskData) => {
                            // –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É –≤ entity
                            saveFutureTask(futureTaskData, connection);
                        }
                    });
                } else {
                    console.error('TaskModal –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                }
            }, [task.id]);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
            const saveFutureTask = (futureTaskData, connection) => {
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É:', futureTaskData);

                const futureId = 'future-' + Date.now();

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ entity
                BX24.callMethod('entity.item.add', {
                    ENTITY: 'tflow_future_task',
                    NAME: futureTaskData.title,
                    PROPERTY_VALUES: {
                        futureId: futureId,
                        title: futureTaskData.title,
                        description: futureTaskData.description,
                        groupId: futureTaskData.groupId.toString(),
                        responsibleId: futureTaskData.responsibleId.toString(),
                        conditionType: futureTaskData.conditionType,
                        delayMinutes: futureTaskData.delayMinutes.toString(),
                        positionX: futureTaskData.positionX.toString(),
                        positionY: futureTaskData.positionY.toString(),
                        isCreated: 'false',
                        realTaskId: ''
                    }
                }, (result) => {
                    if (result.error()) {
                        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:', result.error());
                        return;
                    }

                    console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', result.data());

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
                    BX24.callMethod('entity.item.add', {
                        ENTITY: 'tflow_connections',
                        NAME: 'Connection ' + connection.source + ' -> ' + connection.target,
                        PROPERTY_VALUES: {
                            sourceId: connection.source,
                            targetId: connection.target,
                            connectionType: 'future'
                        }
                    }, (connResult) => {
                        if (connResult.error()) {
                            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏:', connResult.error());
                        } else {
                            console.log('‚úÖ –°–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞');
                            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            loadProcessData();
                        }
                    });
                });
            };

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Pull & Push
            useEffect(() => {
                console.log('üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ID:', task.id);

                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                const pollInterval = setInterval(() => {
                    BX24.callMethod('tasks.task.get', {
                        taskId: task.id,
                        select: ['ID', 'TITLE', 'STATUS']
                    }, (result) => {
                        if (result.error()) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
                            return;
                        }

                        const taskData = result.data();
                        if (taskData && taskData.task) {
                            const currentStatus = taskData.task.status;

                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                            setNodes((currentNodes) => {
                                const currentNode = currentNodes.find(n => n.id === 'task-' + task.id);
                                if (currentNode && currentNode.data.statusCode != currentStatus) {
                                    console.log('üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è:', currentNode.data.statusCode, '‚Üí', currentStatus);

                                    return currentNodes.map((node) => {
                                        if (node.id === 'task-' + task.id) {
                                            return {
                                                ...node,
                                                data: {
                                                    ...node.data,
                                                    statusCode: currentStatus,
                                                    title: taskData.task.title || node.data.title
                                                }
                                            };
                                        }
                                        return node;
                                    });
                                }
                                return currentNodes;
                            });
                        }
                    });
                }, 3000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

                // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                return () => {
                    clearInterval(pollInterval);
                    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫');
                };
            }, [task.id]);

            // –¢–∏–ø—ã —É–∑–ª–æ–≤
            const nodeTypes = {
                taskNode: window.TaskNode
            };

            if (isLoading) {
                return React.createElement('div', {
                    style: {
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        height: '100vh',
                        fontSize: '24px'
                    }
                }, '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...');
            }

            return React.createElement('div', {
                style: {
                    width: '100%',
                    height: '100vh',
                    background: '#f5f7fa'
                }
            },
                React.createElement(ReactFlow, {
                    nodes: nodes,
                    edges: edges,
                    onNodesChange: onNodesChange,
                    onEdgesChange: onEdgesChange,
                    onConnect: onConnect,
                    nodeTypes: nodeTypes,
                    fitView: true,
                    minZoom: 0.5,
                    maxZoom: 1.5,
                    connectionMode: 'loose', // –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤—è–∑–∏ –≤ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
                    defaultEdgeOptions: {
                        type: 'default',
                        animated: false
                    }
                },
                    React.createElement(Controls),
                    React.createElement(Background, {
                        variant: 'dots',
                        gap: 12,
                        size: 1,
                        color: '#ddd'
                    })
                )
            );
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(FlowApp));

        console.log('‚úÖ FlowCanvas rendered');
    }
};

console.log('‚úÖ FlowCanvas component loaded');
