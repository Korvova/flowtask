/**
 * EntityManagerV2 - –ü–†–û–°–¢–û–ô –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Entity Storage
 *
 * –û–î–ù–ê –¢–ê–ë–õ–ò–¶–ê tflow_nodes –¥–ª—è –≤—Å–µ–≥–æ:
 * - –ó–∞–¥–∞—á–∏ (task)
 * - –ü—Ä–µ–¥–∑–∞–¥–∞—á–∏ (future)
 * - –ü–æ–∑–∏—Ü–∏–∏
 * - –°–≤—è–∑–∏
 *
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏:
 * {
 *   NAME: 'process_126',
 *   DETAIL_TEXT: {
 *     nodeId: 'task-127',
 *     type: 'task',           // task / future
 *     title: '–ù–∞–∑–≤–∞–Ω–∏–µ',
 *     status: 5,
 *     positionX: 100,
 *     positionY: 200,
 *     connectionsFrom: [{ type: 'future', id: 'future-123' }],
 *     connectionsTo: [{ type: 'task', id: 'task-126' }],
 *     // –î–ª—è –ø—Ä–µ–¥–∑–∞–¥–∞—á:
 *     condition: 'immediately',
 *     realTaskId: null
 *   }
 * }
 */
window.EntityManagerV2 = {

    // –ö—ç—à –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    _entityExistsCache: false,

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ tflow_nodes –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     */
    ensureEntityExists: function() {
        return new Promise((resolve, reject) => {
            // –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ - —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º success
            if (this._entityExistsCache) {
                resolve(true);
                return;
            }

            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ tflow_nodes...');

            BX24.callMethod('entity.add', {
                ENTITY: 'tflow_nodes',
                NAME: 'Flowtask Nodes Storage',
                ACCESS: {
                    'AU': 'W'  // –í—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
                }
            }, (result) => {
                if (result.error()) {
                    const error = result.error();
                    // –ï—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    if (error.ex && error.ex.error_description && error.ex.error_description.includes('already exists')) {
                        console.log('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ tflow_nodes —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
                        this._entityExistsCache = true;
                        resolve(true);
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
                        reject(error);
                    }
                } else {
                    console.log('‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ tflow_nodes —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                    this._entityExistsCache = true;
                    resolve(true);
                }
            });
        });
    },

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –í–°–ï —É–∑–ª—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
     *
     * –í–ê–ñ–ù–û: entity.item.get –ù–ï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢ FILTER!
     * –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞
     */
    loadProcess: function(processId) {
        return new Promise(async (resolve, reject) => {
            // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try {
                await this.ensureEntityExists();
            } catch (error) {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', error);
                reject(error);
                return;
            }

            console.log('üì• EntityManagerV2: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å', processId);

            const processName = 'process_' + processId;
            const allItems = [];

            const loadBatch = (start = 0) => {
                console.log(`üîç –ó–∞–ø—Ä–æ—Å –∫ entity.item.get: ENTITY=tflow_nodes, FILTER=%NAME=${processName}, start=${start}`);

                BX24.callMethod('entity.item.get', {
                    ENTITY: 'tflow_nodes',
                    FILTER: {
                        '%NAME': processName  // –ü–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ: –≤—Å–µ NAME —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ 'process_149'
                    },
                    SORT: { ID: 'ASC' },
                    start: start
                }, (result) => {
                    console.log('üì¨ –û—Ç–≤–µ—Ç –æ—Ç BX24:', result);

                    if (result.error()) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', result.error());
                        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', result.error_description());
                        reject(result.error());
                        return;
                    }

                    const items = result.data();
                    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${items.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è "${processName}" (start=${start})`);

                    // FILTER —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª –Ω—É–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
                    allItems.push(...items);

                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞:
                    // –ü–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ 50 –∑–∞–ø–∏—Å–µ–π (–∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã)
                    if (items.length < 50) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–∑–ª–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞ ${processId}: ${allItems.length}`);

                        // –ü–∞—Ä—Å–∏–º JSON
                        const nodes = allItems.map(item => {
                            const data = JSON.parse(item.DETAIL_TEXT);
                            data._entityId = item.ID; // –°–æ—Ö—Ä–∞–Ω—è–µ–º Entity ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                            return data;
                        });

                        resolve(nodes);
                    } else {
                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
                        setTimeout(() => loadBatch(start + 50), 100);
                    }
                });
            };

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            loadBatch(0);
        });
    },

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–∑–µ–ª (—Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å)
     */
    saveNode: function(processId, node) {
        return new Promise((resolve, reject) => {
            const isUpdate = !!node._entityId;

            if (isUpdate) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–µ–ª:', node.nodeId);

                BX24.callMethod('entity.item.update', {
                    ENTITY: 'tflow_nodes',
                    ID: node._entityId,
                    NAME: 'process_' + processId + '_node_' + node.nodeId,
                    DETAIL_TEXT: JSON.stringify(node)
                }, (result) => {
                    if (result.error()) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result.error());
                        reject(result.error());
                    } else {
                        console.log('‚úÖ –£–∑–µ–ª –æ–±–Ω–æ–≤–ª—ë–Ω:', node.nodeId);
                        resolve(node._entityId);
                    }
                });
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ
                console.log('‚ûï –°–æ–∑–¥–∞—ë–º —É–∑–µ–ª:', node.nodeId);

                BX24.callMethod('entity.item.add', {
                    ENTITY: 'tflow_nodes',
                    NAME: 'process_' + processId + '_node_' + node.nodeId,
                    DETAIL_TEXT: JSON.stringify(node)
                }, (result) => {
                    if (result.error()) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', result.error());
                        reject(result.error());
                    } else {
                        const entityId = result.data();
                        console.log('‚úÖ –£–∑–µ–ª —Å–æ–∑–¥–∞–Ω:', node.nodeId, 'Entity ID:', entityId);
                        node._entityId = entityId;
                        resolve(entityId);
                    }
                });
            }
        });
    },

    /**
     * –£–¥–∞–ª–∏—Ç—å —É–∑–µ–ª
     */
    deleteNode: function(entityId) {
        return new Promise((resolve, reject) => {
            console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —É–∑–µ–ª, Entity ID:', entityId);

            BX24.callMethod('entity.item.delete', {
                ENTITY: 'tflow_nodes',
                ID: entityId
            }, (result) => {
                if (result.error()) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', result.error());
                    reject(result.error());
                } else {
                    console.log('‚úÖ –£–∑–µ–ª —É–¥–∞–ª—ë–Ω');
                    resolve();
                }
            });
        });
    },

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å –∫ —É–∑–ª—É
     */
    addConnection: function(processId, fromNodeId, toNodeId, toType) {
        return new Promise(async (resolve, reject) => {
            try {
                // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∑–µ–ª-–∏—Å—Ç–æ—á–Ω–∏–∫
                const nodes = await this.loadProcess(processId);
                const fromNode = nodes.find(n => n.nodeId === fromNodeId);

                if (!fromNode) {
                    reject('–£–∑–µ–ª ' + fromNodeId + ' –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }

                // 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å
                if (!fromNode.connectionsFrom) {
                    fromNode.connectionsFrom = [];
                }

                fromNode.connectionsFrom.push({
                    type: toType,
                    id: toNodeId
                });

                // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º
                await this.saveNode(processId, fromNode);
                resolve();
            } catch (error) {
                reject(error);
            }
        });
    },

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å
     */
    removeConnection: function(processId, fromNodeId, toNodeId) {
        return new Promise(async (resolve, reject) => {
            try {
                const nodes = await this.loadProcess(processId);
                const fromNode = nodes.find(n => n.nodeId === fromNodeId);

                if (!fromNode || !fromNode.connectionsFrom) {
                    resolve();
                    return;
                }

                // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
                fromNode.connectionsFrom = fromNode.connectionsFrom.filter(
                    conn => conn.id !== toNodeId
                );

                await this.saveNode(processId, fromNode);
                resolve();
            } catch (error) {
                reject(error);
            }
        });
    },

    /**
     * –ê–ª–∏–∞—Å –¥–ª—è addConnection (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
     */
    saveConnection: function(processId, fromNodeId, toNodeId) {
        return new Promise(async (resolve, reject) => {
            try {
                console.log('üíæ saveConnection:', fromNodeId, '‚Üí', toNodeId);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∑–ª—ã —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
                const nodes = await this.loadProcess(processId);
                const toNode = nodes.find(n => n.nodeId === toNodeId);
                const toType = toNode?.type || 'future';

                // –í—ã–∑—ã–≤–∞–µ–º addConnection
                await this.addConnection(processId, fromNodeId, toNodeId, toType);
                console.log('‚úÖ –°–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ saveConnection');
                resolve();
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ saveConnection:', error);
                reject(error);
            }
        });
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ { processId: 123, nodeCount: 5, lastModified: timestamp }
     *
     * –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
     * –ø–æ—Å–ª–µ 3 –ø—É—Å—Ç—ã—Ö –±–∞—Ç—á–µ–π (–Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)
     */
    getAllProcesses: function() {
        return new Promise(async (resolve, reject) => {
            try {
                await this.ensureEntityExists();

                console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º)...');
                const processMap = {}; // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
                let totalRecordsLoaded = 0;
                let emptyBatchCount = 0; // –°—á–µ—Ç—á–∏–∫ –±–∞—Ç—á–µ–π –±–µ–∑ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                const MAX_EMPTY_BATCHES = 3; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ 3 –ø—É—Å—Ç—ã—Ö –±–∞—Ç—á–µ–π
                const MAX_RECORDS = 1000; // –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

                const loadBatch = (start = 0) => {
                    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                    if (totalRecordsLoaded >= MAX_RECORDS) {
                        console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ${MAX_RECORDS} –∑–∞–ø–∏—Å–µ–π`);
                        finishLoading();
                        return;
                    }

                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –µ—Å–ª–∏ –º–Ω–æ–≥–æ –±–∞—Ç—á–µ–π –ø–æ–¥—Ä—è–¥ –±–µ–∑ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                    if (emptyBatchCount >= MAX_EMPTY_BATCHES) {
                        console.log(`‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: ${MAX_EMPTY_BATCHES} –±–∞—Ç—á–µ–π –±–µ–∑ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤`);
                        finishLoading();
                        return;
                    }

                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_nodes',
                        FILTER: {
                            '%NAME': 'process_'
                        },
                        SORT: { ID: 'DESC' },
                        start: start
                    }, (result) => {
                        if (result.error()) {
                            reject(result.error());
                            return;
                        }

                        const items = result.data();
                        totalRecordsLoaded += items.length;

                        // –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ù–û–í–´–• –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ —ç—Ç–æ–º –±–∞—Ç—á–µ
                        let newProcessesInBatch = 0;
                        const prevProcessCount = Object.keys(processMap).length;

                        items.forEach(item => {
                            if (item.NAME && item.NAME.startsWith('process_')) {
                                const match = item.NAME.match(/^process_(\d+)/);
                                if (match) {
                                    const processId = match[1];

                                    if (!processMap[processId]) {
                                        processMap[processId] = {
                                            processId: processId,
                                            nodeCount: 0,
                                            lastModified: item.DATE_ACTIVE_TO || item.DATE_ACTIVE_FROM
                                        };
                                        newProcessesInBatch++;
                                    }

                                    processMap[processId].nodeCount++;
                                }
                            }
                        });

                        const currentProcessCount = Object.keys(processMap).length;
                        console.log(`  ‚Üí –ë–∞—Ç—á: ${items.length} –∑–∞–ø–∏—Å–µ–π | –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: ${currentProcessCount} (–Ω–æ–≤—ã—Ö: ${newProcessesInBatch})`);

                        // –ï—Å–ª–∏ –≤ –±–∞—Ç—á–µ –Ω–µ –±—ã–ª–æ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                        if (newProcessesInBatch === 0) {
                            emptyBatchCount++;
                        } else {
                            emptyBatchCount = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                        }

                        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –µ—Å–ª–∏:
                        // 1. –ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ 50 –∑–∞–ø–∏—Å–µ–π (–∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö)
                        // 2. –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
                        // 3. –ú–Ω–æ–≥–æ –±–∞—Ç—á–µ–π –±–µ–∑ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞)
                        if (items.length < 50) {
                            console.log('‚úÖ –ö–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö (–ø–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ 50 –∑–∞–ø–∏—Å–µ–π)');
                            finishLoading();
                        } else {
                            setTimeout(() => loadBatch(start + 50), 50);
                        }
                    });
                };

                const finishLoading = () => {
                    const processes = Object.values(processMap);
                    console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${processes.length} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–∑ ${totalRecordsLoaded} –∑–∞–ø–∏—Å–µ–π`);
                    resolve(processes);
                };

                loadBatch(0);
            } catch (error) {
                reject(error);
            }
        });
    },

    /**
     * –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ –≤—Å–µ–º–∏ —É–∑–ª–∞–º–∏
     */
    deleteProcess: function(processId) {
        return new Promise(async (resolve, reject) => {
            try {
                console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å:', processId);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —É–∑–ª—ã –ø—Ä–æ—Ü–µ—Å—Å–∞
                const nodes = await this.loadProcess(processId);
                console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${nodes.length} —É–∑–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);

                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–∑–ª—ã
                let deletedCount = 0;
                for (const node of nodes) {
                    if (node._entityId) {
                        await this.deleteNode(node._entityId);
                        deletedCount++;
                    }
                }

                console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å ${processId} —É–¥–∞–ª—ë–Ω (${deletedCount} —É–∑–ª–æ–≤)`);
                resolve(deletedCount);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
                reject(error);
            }
        });
    }
};

console.log('‚úÖ EntityManagerV2 loaded');
