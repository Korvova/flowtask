/**
 * PullSubscription - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ BX.PullClient
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ Push & Pull
 */
window.PullSubscription = {
    subscriptions: {},
    lastStatuses: {}, // –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    pullClient: null, // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç BX.PullClient
    isInitialized: false,

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BX.PullClient (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)
     */
    initPullClient: function() {
        if (this.isInitialized) {
            console.log('‚úÖ BX.PullClient —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return Promise.resolve();
        }

        return new Promise((resolve, reject) => {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BX.PullClient...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å BX.PullClient
            if (typeof BX === 'undefined' || typeof BX.PullClient === 'undefined') {
                console.error('‚ùå BX.PullClient –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.');
                reject(new Error('BX.PullClient not available'));
                return;
            }

            try {
                // –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç BX.PullClient –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                this.pullClient = new BX.PullClient({
                    restClient: BX24
                });

                console.log('‚úÖ BX.PullClient —Å–æ–∑–¥–∞–Ω');

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ custom –∫–æ–º–∞–Ω–¥—É –æ—Ç –Ω–∞—à–µ–≥–æ webhook
                this.pullClient.subscribe({
                    type: BX.PullClient.SubscriptionType.Server,
                    moduleId: 'application',
                    command: 'flowtask_task_updated',
                    callback: this.handlePullEvent.bind(this)
                });

                console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ flowtask_task_updated —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');

                // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                this.pullClient.start();
                console.log('‚úÖ BX.PullClient –∑–∞–ø—É—â–µ–Ω');

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ DEBUG LOG
                if (window.FlowCanvas && window.FlowCanvas.addDebugLog) {
                    window.FlowCanvas.addDebugLog('üì° Pull & Push –ü–û–î–ö–õ–Æ–ß–ï–ù', '#00ff00');
                }

                this.isInitialized = true;
                resolve();

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BX.PullClient:', error);
                reject(error);
            }
        });
    },

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Pull —Å–æ–±—ã—Ç–∏–π
     */
    handlePullEvent: function(data) {
        console.log('%cüì® PULL —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!', 'color: #00ff00; font-weight: bold; font-size: 14px;', data);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DEBUG LOG
        if (window.FlowCanvas && window.FlowCanvas.addDebugLog) {
            window.FlowCanvas.addDebugLog('üì® PULL —Å–æ–±—ã—Ç–∏–µ: ' + (data.command || 'unknown'), '#00bcd4');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à–µ —Å–æ–±—ã—Ç–∏–µ flowtask_task_updated
        if (data.command !== 'flowtask_task_updated') {
            console.log('‚è≠Ô∏è –ù–µ –Ω–∞—à–µ —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ params
        const eventTaskId = data.params?.taskId;
        const statusBefore = data.params?.statusBefore;
        const statusAfter = data.params?.statusAfter;

        if (!eventTaskId) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è:', data);
            return;
        }

        console.log('üìã –°–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ #' + eventTaskId + ', —Å—Ç–∞—Ç—É—Å: ' + statusBefore + ' ‚Üí ' + statusAfter);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ª–∏ –º—ã –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É
        const subscription = this.subscriptions[eventTaskId];
        if (!subscription) {
            console.log('‚è≠Ô∏è –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–¥–∞—á—É #' + eventTaskId + ', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }

        console.log('%c‚úÖ –≠—Ç–æ –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞! –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...', 'color: #00ff00; font-weight: bold;');

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DEBUG LOG
        if (window.FlowCanvas && window.FlowCanvas.addDebugLog) {
            window.FlowCanvas.addDebugLog('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #' + eventTaskId + ' (' + statusBefore + ' ‚Üí ' + statusAfter + ')', '#4caf50');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        this.fetchTaskData(
            eventTaskId,
            subscription.onStatusChange,
            subscription.onTaskComplete,
            false
        );
    },

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
     * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
     * @param {function} onStatusChange - Callback –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
     * @param {function} onTaskComplete - Callback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
     */
    subscribe: function(taskId, onStatusChange, onTaskComplete) {
        console.log('üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–¥–∞—á–∏:', taskId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ª–∏ –º—ã —É–∂–µ –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É
        if (this.subscriptions[taskId]) {
            console.log('‚è≠Ô∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–¥–∞—á—É:', taskId);
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        this.subscriptions[taskId] = {
            type: 'pending',
            onStatusChange: onStatusChange,
            onTaskComplete: onTaskComplete
        };

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PullClient –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!this.isInitialized) {
            this.initPullClient()
                .then(() => {
                    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É #' + taskId + ' —á–µ—Ä–µ–∑ BX.PullClient');
                    this.fetchTaskData(taskId, onStatusChange, onTaskComplete, true);
                })
                .catch((error) => {
                    console.warn('‚ö†Ô∏è BX.PullClient –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ #' + taskId + ', –∏—Å–ø–æ–ª—å–∑—É–µ–º polling');
                    delete this.subscriptions[taskId];
                    this.startPolling(taskId, onStatusChange, onTaskComplete);
                });
        } else {
            // PullClient —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É #' + taskId + ' —á–µ—Ä–µ–∑ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π BX.PullClient');
            this.fetchTaskData(taskId, onStatusChange, onTaskComplete, true);
        }
    },

    /**
     * Fallback: polling –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ BX.PullClient –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
     */
    startPolling: function(taskId, onStatusChange, onTaskComplete, interval = 3000) {
        console.log('‚è±Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º fallback polling –¥–ª—è –∑–∞–¥–∞—á–∏:', taskId, '–∏–Ω—Ç–µ—Ä–≤–∞–ª:', interval + '–º—Å');

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        this.fetchTaskData(taskId, onStatusChange, onTaskComplete, true);

        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        const pollInterval = setInterval(() => {
            this.fetchTaskData(taskId, onStatusChange, onTaskComplete, false);
        }, interval);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        this.subscriptions[taskId] = {
            interval: pollInterval,
            onStatusChange: onStatusChange,
            onTaskComplete: onTaskComplete,
            type: 'polling'
        };

        console.log('‚úÖ Polling –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏:', taskId);
    },

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
     * @param {boolean} initial - –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–Ω–µ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
     */
    fetchTaskData: function(taskId, onStatusChange, onTaskComplete, initial = false) {
        if (!initial) {
            console.log('%cüîÑ fetchTaskData –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏:', 'color: #2196f3; font-weight: bold;', taskId);
        }

        BX24.callMethod('tasks.task.get', {
            taskId: taskId,
            select: ['ID', 'TITLE', 'STATUS', 'REAL_STATUS']
        }, (result) => {
            if (result.error()) {
                console.error('%c‚ùå tasks.task.get ERROR:', 'color: #f44336; font-weight: bold;', result.error());
                return;
            }

            const taskData = result.data();
            if (taskData && taskData.task) {
                const newStatus = taskData.task.status;
                const realStatus = taskData.task.real_status;
                const lastStatus = this.lastStatuses[taskId];

                if (!initial) {
                    console.log('%cüìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ #' + taskId + ':', 'color: #2196f3; font-weight: bold;', newStatus, '(real:', realStatus, ') –ø—Ä–µ–¥—ã–¥—É—â–∏–π:', lastStatus);
                }

                // –î–ª—è initial –≤—ã–∑–æ–≤–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ callbacks
                if (initial) {
                    this.lastStatuses[taskId] = newStatus;
                    console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ #' + taskId + ' —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', newStatus);
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
                const statusChanged = lastStatus !== undefined && lastStatus !== newStatus;

                if (!statusChanged) {
                    console.log('%c  ‚è≠Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º callbacks', 'color: #9e9e9e;');
                    return;
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                this.lastStatuses[taskId] = newStatus;

                // –í—ã–∑—ã–≤–∞–µ–º callback –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                if (onStatusChange) {
                    console.log('%c  ‚Üí –í—ã–∑—ã–≤–∞–µ–º onStatusChange callback (—Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: ' + lastStatus + ' ‚Üí ' + newStatus + ')', 'color: #9c27b0;');
                    onStatusChange(newStatus, taskData.task);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (—Å—Ç–∞—Ç—É—Å 5 = –ó–∞–≤–µ—Ä—à–µ–Ω–∞) –ò —ç—Ç–æ –ù–û–í–û–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                if (newStatus == 5 && lastStatus != 5) {
                    console.log('%c‚úÖ‚úÖ‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê (status=5)!', 'color: #00ff00; font-size: 16px; font-weight: bold;');
                    if (onTaskComplete) {
                        console.log('%c  ‚Üí –í—ã–∑—ã–≤–∞–µ–º onTaskComplete callback...', 'color: #00ff00; font-weight: bold;');
                        onTaskComplete(taskId, taskData.task);
                    } else {
                        console.warn('%c  ‚ö†Ô∏è  onTaskComplete callback –ù–ï –û–ü–†–ï–î–ï–õ–Å–ù!', 'color: #ff9800; font-weight: bold;');
                    }
                } else if (newStatus == 5) {
                    console.log('%c  ‚è≠Ô∏è –ó–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º onTaskComplete', 'color: #9e9e9e;');
                } else {
                    console.log('%c  ‚ÑπÔ∏è  –ó–∞–¥–∞—á–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (status=' + newStatus + ')', 'color: #9c27b0;');
                }
            }
        });
    },

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
     */
    unsubscribe: function(taskId) {
        const subscription = this.subscriptions[taskId];

        if (!subscription) {
            console.warn('‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏:', taskId);
            return;
        }

        if (subscription.type === 'pull') {
            // –î–ª—è pull –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ subscriptions
            // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ tasks –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π
            console.log('üîï –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∑–∞–¥–∞—á—É #' + taskId + ' (PULL)');

        } else if (subscription.type === 'polling') {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
            clearInterval(subscription.interval);
            console.log('üîï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω polling –¥–ª—è –∑–∞–¥–∞—á–∏:', taskId);
        }

        delete this.subscriptions[taskId];
        delete this.lastStatuses[taskId];
    },

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
     */
    unsubscribeAll: function() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');

        Object.keys(this.subscriptions).forEach(taskId => {
            this.unsubscribe(taskId);
        });

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PullClient –µ—Å–ª–∏ –±—ã–ª –∑–∞–ø—É—â–µ–Ω
        if (this.pullClient && this.isInitialized) {
            try {
                this.pullClient.stop();
                console.log('üî¥ BX.PullClient –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ BX.PullClient:', error);
            }
            this.isInitialized = false;
        }
    }
};

console.log('‚úÖ PullSubscription component loaded');
