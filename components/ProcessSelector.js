/**
 * ProcessSelector - –í—ã–±–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Å–≤—è–∑–µ–π
 *
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞:
 * 1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å (–ø–æ–ª–µ "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞", –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = ID –∑–∞–¥–∞—á–∏)
 * 2. –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ (–≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞)
 */
window.ProcessSelector = {

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
     * @param {number} taskId - ID —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
     * @param {Function} onSelect - Callback(processName, isNew)
     */
    show: function(taskId, onSelect) {
        console.log('üìã ProcessSelector: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏', taskId);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        this.loadExistingProcesses().then(processes => {
            this.renderDialog(taskId, processes, onSelect);
        });
    },

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö NAME)
     */
    loadExistingProcesses: async function() {
        return new Promise((resolve) => {
            const processNames = new Set();
            let start = 0;
            const batchSize = 50;

            const loadBatch = (startPos) => {
                BX24.callMethod('entity.item.get', {
                    ENTITY: 'tflow_nodes',
                    FILTER: {
                        '%NAME': 'process_'
                    },
                    SORT: { ID: 'DESC' },
                    start: startPos
                }, (result) => {
                    if (result.error()) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', result.error());
                        resolve([]);
                        return;
                    }

                    const items = result.data();
                    console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', items.length, '—Å –ø–æ–∑–∏—Ü–∏–∏', startPos);

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ processId –∏–∑ NAME
                    items.forEach(item => {
                        // NAME —Ñ–æ—Ä–º–∞—Ç: process_154_node_task-154
                        const match = item.NAME.match(/^process_(\d+|[a-zA-Z0-9_-]+)/);
                        if (match) {
                            const processName = match[1];
                            processNames.add(processName);
                        }
                    });

                    // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –∑–∞–ø–∏—Å–∏ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    if (result.more()) {
                        loadBatch(startPos + batchSize);
                    } else {
                        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Set –≤ –º–∞—Å—Å–∏–≤
                        const processList = Array.from(processNames);
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:', processList.length);
                        resolve(processList);
                    }
                });
            };

            loadBatch(0);
        });
    },

    /**
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
     */
    renderDialog: function(taskId, processes, onSelect) {
        const dialogHtml = `
            <div id="process-selector-overlay" style="
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
            ">
                <div style="
                    background: white;
                    padding: 30px;
                    border-radius: 12px;
                    max-width: 500px;
                    width: 90%;
                    box-shadow: 0 10px 40px rgba(0,0,0,0.3);
                ">
                    <h2 style="margin: 0 0 20px 0; font-size: 20px;">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç</h2>

                    <!-- –í–∞—Ä–∏–∞–Ω—Ç 1: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å -->
                    <div style="margin-bottom: 25px; padding: 15px; border: 2px solid #e0e0e0; border-radius: 8px;">
                        <label style="display: block; margin-bottom: 10px;">
                            <input type="radio" name="process-choice" value="new" checked style="margin-right: 8px;">
                            <strong>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å</strong>
                        </label>
                        <div style="margin-left: 28px;">
                            <label style="display: block; margin-bottom: 5px; font-size: 14px; color: #666;">
                                –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞:
                            </label>
                            <input
                                type="text"
                                id="process-name-input"
                                value="${taskId}"
                                style="
                                    width: 100%;
                                    padding: 8px 12px;
                                    border: 1px solid #ddd;
                                    border-radius: 4px;
                                    font-size: 14px;
                                    box-sizing: border-box;
                                "
                            />
                            <div style="font-size: 12px; color: #999; margin-top: 5px;">
                                –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID –∑–∞–¥–∞—á–∏
                            </div>
                        </div>
                    </div>

                    <!-- –í–∞—Ä–∏–∞–Ω—Ç 2: –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º -->
                    <div style="margin-bottom: 25px; padding: 15px; border: 2px solid #e0e0e0; border-radius: 8px;">
                        <label style="display: block; margin-bottom: 10px;">
                            <input type="radio" name="process-choice" value="existing" style="margin-right: 8px;">
                            <strong>–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ</strong>
                        </label>
                        <div style="margin-left: 28px;">
                            <select
                                id="process-list-select"
                                disabled
                                style="
                                    width: 100%;
                                    padding: 8px 12px;
                                    border: 1px solid #ddd;
                                    border-radius: 4px;
                                    font-size: 14px;
                                    background: #f5f5f5;
                                    box-sizing: border-box;
                                "
                            >
                                <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å --</option>
                                ${processes.map(p => `<option value="${p}">–ü—Ä–æ—Ü–µ—Å—Å ${p}</option>`).join('')}
                            </select>
                            ${processes.length === 0 ? '<div style="font-size: 12px; color: #999; margin-top: 5px;">–ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</div>' : ''}
                        </div>
                    </div>

                    <!-- –ö–Ω–æ–ø–∫–∏ -->
                    <div style="display: flex; gap: 10px; justify-content: flex-end;">
                        <button id="process-cancel-btn" style="
                            padding: 10px 20px;
                            border: 1px solid #ddd;
                            background: white;
                            border-radius: 6px;
                            cursor: pointer;
                            font-size: 14px;
                        ">–û—Ç–º–µ–Ω–∞</button>
                        <button id="process-select-btn" style="
                            padding: 10px 20px;
                            border: none;
                            background: #2fc6f6;
                            color: white;
                            border-radius: 6px;
                            cursor: pointer;
                            font-size: 14px;
                            font-weight: 500;
                        ">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ DOM
        document.body.insertAdjacentHTML('beforeend', dialogHtml);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
        const radioNew = document.querySelector('input[name="process-choice"][value="new"]');
        const radioExisting = document.querySelector('input[name="process-choice"][value="existing"]');
        const nameInput = document.getElementById('process-name-input');
        const selectList = document.getElementById('process-list-select');

        radioNew.addEventListener('change', () => {
            nameInput.disabled = false;
            nameInput.style.background = 'white';
            selectList.disabled = true;
            selectList.style.background = '#f5f5f5';
        });

        radioExisting.addEventListener('change', () => {
            nameInput.disabled = true;
            nameInput.style.background = '#f5f5f5';
            selectList.disabled = false;
            selectList.style.background = 'white';
        });

        // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        document.getElementById('process-select-btn').addEventListener('click', () => {
            const choice = document.querySelector('input[name="process-choice"]:checked').value;

            if (choice === 'new') {
                const processName = nameInput.value.trim();
                if (!processName) {
                    alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞');
                    return;
                }
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω–æ: –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å "' + processName + '"');
                this.close();
                onSelect(processName, true);
            } else {
                const selectedProcess = selectList.value;
                if (!selectedProcess) {
                    alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ —Å–ø–∏—Å–∫–∞');
                    return;
                }
                console.log('‚úÖ –í—ã–±—Ä–∞–Ω–æ: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å "' + selectedProcess + '"');
                this.close();
                onSelect(selectedProcess, false);
            }
        });

        // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
        document.getElementById('process-cancel-btn').addEventListener('click', () => {
            console.log('‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞');
            this.close();
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π canvas –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            onSelect(null, false);
        });
    },

    /**
     * –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
     */
    close: function() {
        const overlay = document.getElementById('process-selector-overlay');
        if (overlay) {
            overlay.remove();
        }
    }
};

console.log('‚úÖ ProcessSelector loaded');
