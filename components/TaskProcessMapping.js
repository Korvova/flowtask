/**
 * TaskProcessMapping - –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–¥–∞—á –∫ –ø—Ä–æ—Ü–µ—Å—Å–∞–º
 * –•—Ä–∞–Ω–∏—Ç —Å–≤—è–∑—å taskId ‚Üí processId –≤ Entity Storage
 */
window.TaskProcessMapping = {

    /**
     * –ü–æ–ª—É—á–∏—Ç—å processId –¥–ª—è –∑–∞–¥–∞—á–∏
     * –ò—â–µ—Ç –≤ –∫–∞–∫–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–∑–µ–ª task-{taskId}
     */
    getProcessId: function(taskId) {
        return new Promise(async (resolve) => {
            try {
                console.log('üîç –ò—â–µ–º processId –¥–ª—è –∑–∞–¥–∞—á–∏', taskId);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ task-{taskId}
                const result = await new Promise((resolveInner) => {
                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_nodes',
                        FILTER: {
                            '%NAME': 'task-' + taskId
                        }
                    }, (res) => {
                        if (res.error()) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', res.error());
                            resolveInner([]);
                        } else {
                            resolveInner(res.data());
                        }
                    });
                });

                if (result.length > 0) {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º processId –∏–∑ NAME: process_123_node_task-456
                    const name = result[0].NAME;
                    const match = name.match(/^process_(\d+)/);

                    if (match) {
                        const processId = parseInt(match[1]);
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω processId:', processId, '–¥–ª—è –∑–∞–¥–∞—á–∏', taskId);
                        resolve(processId);
                        return;
                    }
                }

                console.log('‚ÑπÔ∏è ProcessId –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º taskId:', taskId);
                resolve(taskId); // Fallback –Ω–∞ taskId

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ processId:', error);
                resolve(taskId); // Fallback –Ω–∞ taskId
            }
        });
    }
};

console.log('‚úÖ TaskProcessMapping loaded');
