/**
 * FlowCanvas - –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–ª–æ—Ç–Ω–∞ React Flow
 * –í–ê–ñ–ù–û: Entity names ‚â§20 chars (Bitrix24 limitation)
 */
window.FlowCanvas = {
    render: function(task) {
        const React = window.React;
        const ReactDOM = window.ReactDOM;
        const RF = window.ReactFlow || window.reactflow;

        if (!React || !ReactDOM || !RF) {
            console.error('React –∏–ª–∏ ReactFlow –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return;
        }

        const { useState, useCallback, useEffect, useMemo } = React;
        const { ReactFlow, Controls, Background, addEdge, applyNodeChanges, applyEdgeChanges, useNodesState, useEdgesState } = RF;

        // –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        function FlowApp() {
            // Debug –ª–æ–≥–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ useEffect —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ

            const [nodes, setNodes, onNodesChange] = useNodesState([]);
            const [edges, setEdges, onEdgesChange] = useEdgesState([]);
            const [isLoading, setIsLoading] = useState(true);
            const [debugLog, setDebugLog] = useState([]);
            const isDraggingRef = React.useRef(false);
            const connectingNodeId = React.useRef(null);
            const reactFlowInstance = React.useRef(null);

            // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ debug –ª–æ–≥
            const addDebugLog = (message, color = '#000') => {
                const timestamp = new Date().toLocaleTimeString();
                const logEntry = `[${timestamp}] ${message}`;
                console.log(`%c${logEntry}`, `color: ${color}; font-weight: bold;`);
                setDebugLog(prev => [...prev, { message: logEntry, color }].slice(-20)); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
            };

            // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º addDebugLog –∏ reloadTaskNode –≥–ª–æ–±–∞–ª—å–Ω–æ
            React.useEffect(() => {
                console.log('%c‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'color: #00ff00; font-size: 16px;');
                console.log('%cüöÄ FlowApp —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω (React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)', 'color: #00ff00; font-size: 14px; font-weight: bold;');
                console.log('%c‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'color: #00ff00; font-size: 16px;');

                window.FlowCanvas.addDebugLog = addDebugLog;
                addDebugLog('FlowApp —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω', '#00ff00');
                addDebugLog('‚úÖ addDebugLog —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ window.FlowCanvas', '#00ff00');
            }, []);

            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ edges state (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏)
            // useEffect(() => {
            //     console.log('%cüîç EDGES STATE –ò–ó–ú–ï–ù–ò–õ–°–Ø!', 'color: #ff0000; font-weight: bold; font-size: 14px;');
            //     console.log('Edges count:', edges.length);
            //     edges.forEach((e, idx) => {
            //         console.log(`  ${idx+1}. ${e.id}: ${e.source} ‚Üí ${e.target}`);
            //     });
            // }, [edges]);

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            useEffect(() => {
                console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ID:', task.id);
                loadProcessData();
            }, [task.id]);

            // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–≤—è–∑–µ–π –±–µ–∑ processId
            const migrateOldConnections = (taskId, processId) => {
                addDebugLog('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–≤—è–∑–µ–π...', '#ff9800');

                BX24.callMethod('entity.item.get', {
                    ENTITY: 'tflow_conn'
                }, (result) => {
                    if (result.error()) {
                        addDebugLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏', '#ff9800');
                        return;
                    }

                    const connections = result.data();
                    let migratedCount = 0;

                    connections.forEach(conn => {
                        if (!conn.DETAIL_TEXT) return;

                        try {
                            const data = JSON.parse(conn.DETAIL_TEXT);

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–≤—è–∑—å –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
                            const isRelated = data.parentTaskId == taskId ||
                                             data.processId == processId ||
                                             (!data.processId && data.parentTaskId == taskId);

                            // –ï—Å–ª–∏ processId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ —Å–≤—è–∑—å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
                            if (!data.processId && isRelated) {
                                data.processId = processId;

                                BX24.callMethod('entity.item.update', {
                                    ENTITY: 'tflow_conn',
                                    ID: conn.ID,
                                    DETAIL_TEXT: JSON.stringify(data)
                                }, (updateResult) => {
                                    if (!updateResult.error()) {
                                        migratedCount++;
                                        addDebugLog('‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–≤—è–∑—å ID=' + conn.ID, '#00ff00');
                                    }
                                });
                            }
                        } catch (e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–∏—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                        }
                    });

                    if (migratedCount > 0) {
                        addDebugLog('‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–≤—è–∑–µ–π: ' + migratedCount, '#00ff00');
                    } else {
                        addDebugLog('‚ÑπÔ∏è –°–≤—è–∑–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', '#2196f3');
                    }
                });
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞
            const loadProcessData = async () => {
                addDebugLog('üì• –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–†–û–¶–ï–°–°–ê', '#2196f3');

                try {
                    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
                    const taskPosition = await loadTaskPosition(task.id);

                    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (–≤–∫–ª—é—á–∞—è UF_FLOWTASK_PROCESS_ID)
                    const freshTaskData = await new Promise((resolve) => {
                        BX24.callMethod('tasks.task.get', {
                            taskId: task.id,
                            select: ['ID', 'TITLE', 'STATUS', 'RESPONSIBLE_ID', 'PARENT_ID', 'UF_FLOWTASK_PROCESS_ID']
                        }, (result) => {
                            if (result.error()) {
                                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ–∂–∏–π —Å—Ç–∞—Ç—É—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à');
                                resolve(task);
                            } else {
                                const taskData = result.data().task;
                                console.log('üì¶ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ tasks.task.get:', taskData);
                                resolve(taskData);
                            }
                        });
                    });

                    // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º processId –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
                    let processId = freshTaskData.ufFlowtaskProcessId || freshTaskData.UF_FLOWTASK_PROCESS_ID;

                    if (!processId) {
                        // –ï—Å–ª–∏ processId –Ω–µ—Ç - —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
                        processId = task.id.toString();
                        addDebugLog('üÜï –ö–æ—Ä–Ω–µ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞! processId = ' + processId, '#ff9800');

                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º processId –≤ –∑–∞–¥–∞—á—É
                        BX24.callMethod('tasks.task.update', {
                            taskId: task.id,
                            fields: {
                                UF_FLOWTASK_PROCESS_ID: processId
                            }
                        }, (updateResult) => {
                            if (updateResult.error()) {
                                addDebugLog('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å processId: ' + JSON.stringify(updateResult.error()), '#ff9800');
                            } else {
                                addDebugLog('‚úÖ ProcessId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ' + processId, '#00ff00');
                            }
                        });
                    } else {
                        addDebugLog('üìå ProcessId –∑–∞–¥–∞—á–∏: ' + processId, '#2196f3');
                    }

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º processId –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
                    window.currentProcessId = processId;

                    // –ú–ò–ì–†–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ –±–µ–∑ processId
                    migrateOldConnections(task.id, processId);

                    // 3. –°–æ–∑–¥–∞—ë–º —É–∑–µ–ª —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                    const mainNode = {
                        id: 'task-' + task.id,
                        type: 'taskNode',
                        position: taskPosition || { x: 250, y: 100 },
                        draggable: true,
                        data: {
                            id: freshTaskData.id,
                            title: freshTaskData.title,
                            statusCode: freshTaskData.status,
                            responsibleId: freshTaskData.responsibleId,
                            isFuture: false,
                            isRealTask: true
                        }
                    };

                    // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏ (future tasks)
                    const futureTasks = await loadFutureTasks(task.id);

                    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    const futureNodes = [];
                    const createdTaskIds = [];

                    addDebugLog('üìã –ü—Ä–µ–¥–∑–∞–¥–∞—á: ' + futureTasks.length, '#2196f3');
                    futureTasks.forEach(ft => {
                        const isCreated = ft.isCreated || false;
                        const realTaskId = ft.realTaskId || '–Ω–µ—Ç';
                        addDebugLog('  ‚Üí ' + ft.futureId.substring(7, 17) + ' created=' + isCreated + ' taskId=' + realTaskId, '#2196f3');
                    });

                    for (const ft of futureTasks) {
                        if (ft.isCreated && ft.realTaskId) {
                            // –≠—Ç–∞ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∞ —É–∂–µ —Å—Ç–∞–ª–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ–π
                            addDebugLog('‚úÖ –°–æ–∑–¥–∞–Ω–∞ ‚Üí task-' + ft.realTaskId, '#00ff00');
                            createdTaskIds.push(ft.realTaskId);
                        } else {
                            // –û–±—ã—á–Ω–∞—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∞ (–µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)
                            addDebugLog('üìã –ù–µ—Å–æ–∑–¥–∞–Ω–∞: ' + ft.futureId.substring(7, 17), '#ff9800');
                            futureNodes.push({
                                id: ft.futureId,
                                type: 'taskNode',
                                position: { x: parseFloat(ft.positionX), y: parseFloat(ft.positionY) },
                                draggable: true,
                                data: {
                                    id: ft.futureId,
                                    futureId: ft.futureId,
                                    parentTaskId: ft.parentTaskId,
                                    title: ft.title,
                                    description: ft.description,
                                    groupId: ft.groupId,
                                    responsibleId: ft.responsibleId,
                                    isFuture: true,
                                    isRealTask: false,
                                    conditionType: ft.conditionType,
                                    delayMinutes: ft.delayMinutes,
                                    positionX: ft.positionX,
                                    positionY: ft.positionY,
                                    isCreated: ft.isCreated,
                                    realTaskId: ft.realTaskId,
                                    entityItemId: ft.id,  // ID –≤ Entity –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                                    onDelete: () => deleteFutureTask(ft.futureId, ft.id),
                                    onEdit: (data) => {
                                        console.log('üìù –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:', data.futureId);
                                        // –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                                        data.onUpdate = updateFutureTask;
                                        window.TaskModal.showEdit(data);
                                    }
                                }
                            });
                        }
                    }

                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                    addDebugLog('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ: ' + createdTaskIds.length, '#2196f3');
                    const createdTaskNodes = await loadCreatedTasks(createdTaskIds, futureTasks);
                    addDebugLog('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–∑–ª–æ–≤: ' + createdTaskNodes.length, '#00ff00');

                    // 3.5. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –í–°–Æ –¶–ï–ü–û–ß–ö–£ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≤–≤–µ—Ä—Ö
                    addDebugLog('üîº –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ä–æ–¥–∏—Ç–µ–ª–µ–π...', '#9c27b0');
                    const parentNodes = await loadAllParents(task.id);
                    addDebugLog('üìä –£–∑–ª–æ–≤ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π: ' + parentNodes.length, '#673ab7');

                    // 3.6. –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
                    addDebugLog('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–¥–∑–∞–¥–∞—á...', '#673ab7');
                    const allSubtasks = await loadAllSubtasks(task.id);
                    addDebugLog('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ): ' + allSubtasks.length, '#4caf50');

                    // –°–æ–∑–¥–∞—ë–º —É–∑–ª—ã –¥–ª—è –ø–æ–¥–∑–∞–¥–∞—á
                    const subtaskNodes = [];
                    for (const subtask of allSubtasks) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π (–∏–∑ createdTaskNodes)
                        const alreadyLoaded = createdTaskNodes.find(n => n.id === 'task-' + subtask.id);
                        if (alreadyLoaded) {
                            addDebugLog('  ‚è≠Ô∏è –ü–æ–¥–∑–∞–¥–∞—á–∞ ' + subtask.id + ' —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', '#9e9e9e');
                            continue;
                        }

                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–¥–∑–∞–¥–∞—á–∏
                        const subtaskPosition = await loadTaskPosition(subtask.id);

                        subtaskNodes.push({
                            id: 'task-' + subtask.id,
                            type: 'taskNode',
                            position: subtaskPosition || {
                                x: 250 + Math.random() * 300,
                                y: 300 + Math.random() * 200
                            },
                            draggable: true,
                            data: {
                                id: subtask.id,
                                title: subtask.title,
                                statusCode: subtask.status,
                                responsibleId: subtask.responsibleId,
                                isFuture: false,
                                isRealTask: true,
                                isSubtask: true
                            }
                        });

                        addDebugLog('  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∞: ' + subtask.id + ' - ' + subtask.title, '#00bcd4');
                    }

                    addDebugLog('üìä –í—Å–µ–≥–æ —É–∑–ª–æ–≤ –ø–æ–¥–∑–∞–¥–∞—á: ' + subtaskNodes.length, '#673ab7');

                    // 3.7. –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ processId
                    const processTaskNodes = await loadAllProcessTasks(processId);
                    addDebugLog('üìä –í—Å–µ–≥–æ —É–∑–ª–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞: ' + processTaskNodes.length, '#673ab7');

                    // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ (connections) - –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –∏ –í–°–ï–• —Ä–æ–¥–∏—Ç–µ–ª–µ–π
                    const parentTaskIds = parentNodes
                        .filter(node => node.data.isRealTask)
                        .map(node => node.data.id);

                    addDebugLog('üîó –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ EntityManager –¥–ª—è processId=' + processId, '#673ab7');
                    console.log('%cüö®üö®üö® –ò–°–ü–û–õ–¨–ó–£–ï–ú EntityManager.loadConnections', 'color: red; font-size: 20px; font-weight: bold;');
                    console.log('  processId:', processId);
                    console.log('  window.currentProcessId:', window.currentProcessId);

                    const connections = await window.EntityManager.loadConnections(processId);

                    console.log('%cüö®üö®üö® –†–ï–ó–£–õ–¨–¢–ê–¢ EntityManager.loadConnections', 'color: green; font-size: 20px; font-weight: bold;');
                    console.log('  connections:', connections);

                    addDebugLog('üìä –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π –∏–∑ Entity: ' + connections.length, '#2196f3');
                    connections.forEach((conn, idx) => {
                        addDebugLog('  ' + (idx+1) + '. ' + conn.sourceId + ' ‚Üí ' + conn.targetId + ' (type: ' + conn.connectionType + ')', '#9c27b0');
                    });

                    const loadedEdges = connections.map(conn => {
                        console.log('üìä –°–æ–∑–¥–∞—ë–º edge:', conn.sourceId, '‚Üí', conn.targetId);
                        return {
                            id: 'edge-' + conn.sourceId + '-' + conn.targetId,
                            source: conn.sourceId,
                            target: conn.targetId,
                            type: conn.connectionType === 'future' ? 'default' : 'default',
                            className: conn.connectionType === 'future' ? 'future-edge' : '',
                            animated: true,
                            style: { stroke: '#ff0000', strokeWidth: 3 }  // –Ø–†–ö–û-–ö–†–ê–°–ù–´–ô –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏!
                        };
                    });

                    addDebugLog('üìä –°–æ–∑–¥–∞–Ω–æ edges –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + loadedEdges.length, '#00ff00');
                    console.log('%c‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'color: #ff0000; font-weight: bold;');
                    console.log('%cüìä EDGES ARRAY –î–õ–Ø setEdges():', 'color: #ff0000; font-weight: bold; font-size: 16px;');
                    console.log('–í—Å–µ–≥–æ edges:', loadedEdges.length);
                    loadedEdges.forEach((edge, idx) => {
                        console.log(`  ${idx+1}. id: ${edge.id}, source: ${edge.source}, target: ${edge.target}`);
                    });
                    console.log('%c‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'color: #ff0000; font-weight: bold;');

                    const allNodes = [mainNode, ...parentNodes, ...futureNodes, ...createdTaskNodes, ...subtaskNodes, ...processTaskNodes];
                    console.log('%c‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'color: #00ff00; font-weight: bold;');
                    console.log('%cüìä NODES ARRAY –î–õ–Ø setNodes():', 'color: #00ff00; font-weight: bold; font-size: 16px;');
                    console.log('–í—Å–µ–≥–æ nodes:', allNodes.length);
                    allNodes.forEach((node, idx) => {
                        console.log(`  ${idx+1}. id: ${node.id}, type: ${node.data.isFuture ? 'future' : 'task'}`);
                    });
                    console.log('%c‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'color: #00ff00; font-weight: bold;');

                    setNodes(allNodes);
                    setEdges(loadedEdges);
                    setIsLoading(false);

                    console.log('%c‚úÖ‚úÖ‚úÖ setNodes() –∏ setEdges() –í–´–ó–í–ê–ù–´!', 'color: #00ff00; font-weight: bold; font-size: 18px;');

                    const totalNodes = [mainNode, ...parentNodes, ...futureNodes, ...createdTaskNodes, ...subtaskNodes, ...processTaskNodes].length;
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                        nodes: totalNodes,
                        edges: loadedEdges.length
                    });
                    addDebugLog('üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–∑–ª–æ–≤: ' + totalNodes, '#4caf50');

                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞:', error);
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
                    setNodes([{
                        id: 'task-' + task.id,
                        type: 'taskNode',
                        position: { x: 250, y: 100 },
                        data: {
                            id: task.id,
                            title: task.title,
                            statusCode: task.status,
                            responsibleId: task.responsibleId,
                            isFuture: false,
                            isRealTask: true
                        }
                    }]);
                    setIsLoading(false);
                }
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –∏–∑ entity
            const loadTaskPosition = (taskId) => {
                return new Promise((resolve) => {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ (FILTER –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å DETAIL_TEXT!)
                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_pos'
                    }, (result) => {
                        if (result.error()) {
                            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π:', result.error());
                            resolve(null);
                        } else {
                            const allItems = result.data();

                            // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é –ø–æ taskId –≤ DETAIL_TEXT
                            const item = allItems.find(item => {
                                if (!item.DETAIL_TEXT) return false;
                                try {
                                    const data = JSON.parse(item.DETAIL_TEXT);
                                    return data.taskId == taskId;
                                } catch (e) {
                                    return false;
                                }
                            });

                            if (item && item.DETAIL_TEXT) {
                                try {
                                    const data = JSON.parse(item.DETAIL_TEXT);
                                    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è task-' + taskId + ':', data.positionX, data.positionY);
                                    resolve({
                                        x: parseFloat(data.positionX),
                                        y: parseFloat(data.positionY)
                                    });
                                } catch (e) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–∏:', e);
                                    resolve(null);
                                }
                            } else {
                                console.log('‚ÑπÔ∏è –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è task-' + taskId + ', –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç');
                                resolve(null);
                            }
                        }
                    });
                });
            };

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≤–≤–µ—Ä—Ö –ø–æ —Ü–µ–ø–æ—á–∫–µ
            const loadAllParents = async (taskId, visitedIds = new Set(), depth = 0) => {
                if (depth > 10) {
                    addDebugLog('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π (10)', '#ff9800');
                    return [];
                }

                if (visitedIds.has(taskId)) {
                    addDebugLog('‚ö†Ô∏è –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª—è task-' + taskId, '#ff9800');
                    return [];
                }

                visitedIds.add(taskId);
                addDebugLog('üîç –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è task-' + taskId + ' (–≥–ª—É–±–∏–Ω–∞: ' + depth + ')', '#9c27b0');

                // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –≤ tflow_future
                const parentTaskId = await new Promise((resolve) => {
                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_future'
                    }, (result) => {
                        if (result.error()) {
                            resolve(null);
                        } else {
                            const items = result.data();
                            const futureTask = items.find(item => {
                                if (!item.DETAIL_TEXT) return false;
                                try {
                                    const data = JSON.parse(item.DETAIL_TEXT);
                                    return data.realTaskId == taskId && data.isCreated;
                                } catch (e) {
                                    return false;
                                }
                            });

                            if (futureTask) {
                                const data = JSON.parse(futureTask.DETAIL_TEXT);
                                resolve(data.parentTaskId);
                            } else {
                                resolve(null);
                            }
                        }
                    });
                });

                if (!parentTaskId) {
                    addDebugLog('  ‚ÑπÔ∏è –†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è task-' + taskId, '#9e9e9e');
                    return [];
                }

                addDebugLog('  ‚úÖ –ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å: task-' + parentTaskId, '#4caf50');

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏
                const parentTaskData = await new Promise((resolve) => {
                    BX24.callMethod('tasks.task.get', {
                        taskId: parentTaskId,
                        select: ['ID', 'TITLE', 'STATUS', 'RESPONSIBLE_ID', 'PARENT_ID']
                    }, (result) => {
                        if (result.error()) {
                            resolve(null);
                        } else {
                            resolve(result.data().task);
                        }
                    });
                });

                if (!parentTaskData) {
                    addDebugLog('  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ task-' + parentTaskId, '#f44336');
                    return [];
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–æ–¥–∏—Ç–µ–ª—è
                const parentPosition = await loadTaskPosition(parentTaskData.id);

                const parentNode = {
                    id: 'task-' + parentTaskData.id,
                    type: 'taskNode',
                    position: parentPosition || {
                        x: 250 - (depth * 300),
                        y: -200 - (depth * 200)
                    },
                    draggable: true,
                    data: {
                        id: parentTaskData.id,
                        title: parentTaskData.title,
                        statusCode: parentTaskData.status,
                        responsibleId: parentTaskData.responsibleId,
                        isFuture: false,
                        isRealTask: true,
                        isParent: true,
                        depth: depth
                    }
                };

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
                const parentFutureTasks = await loadFutureTasks(parentTaskData.id);
                const futureNodes = parentFutureTasks
                    .filter(ft => !ft.isCreated) // –¢–æ–ª—å–∫–æ –Ω–µ—Å–æ–∑–¥–∞–Ω–Ω—ã–µ
                    .map(ft => ({
                        id: ft.futureId,
                        type: 'taskNode',
                        position: { x: parseFloat(ft.positionX), y: parseFloat(ft.positionY) },
                        draggable: true,
                        data: {
                            id: ft.futureId,
                            futureId: ft.futureId,
                            parentTaskId: ft.parentTaskId,
                            title: ft.title,
                            description: ft.description,
                            groupId: ft.groupId,
                            responsibleId: ft.responsibleId,
                            isFuture: true,
                            isRealTask: false,
                            conditionType: ft.conditionType,
                            delayMinutes: ft.delayMinutes,
                            positionX: ft.positionX,
                            positionY: ft.positionY,
                            isCreated: ft.isCreated,
                            realTaskId: ft.realTaskId,
                            entityItemId: ft.id,
                            onDelete: () => {},
                            onEdit: () => {}
                        }
                    }));

                addDebugLog('  üìã –ü—Ä–µ–¥–∑–∞–¥–∞—á —É —Ä–æ–¥–∏—Ç–µ–ª—è: ' + parentFutureTasks.length + ', –Ω–µ—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö: ' + futureNodes.length, '#9c27b0');

                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Ä–æ–¥–∏—Ç–µ–ª—è
                const grandParents = await loadAllParents(parentTaskData.id, visitedIds, depth + 1);

                return [parentNode, ...futureNodes, ...grandParents];
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–∑–∞–¥–∞—á –∏–∑ entity (–ø–æ processId!)
            const loadFutureTasks = (taskId) => {
                return new Promise((resolve) => {
                    const currentProcessId = window.currentProcessId || taskId.toString();

                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_future'
                    }, (result) => {
                        if (result.error()) {
                            console.warn('–ü—Ä–µ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                            resolve([]);
                        } else {
                            const items = result.data();
                            console.log("üì• Entity result:", items);

                            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ processId (–Ω–µ –ø–æ parentTaskId!)
                            const futureTasks = items
                                .filter(item => {
                                    if (!item.DETAIL_TEXT) return false;
                                    try {
                                        const data = JSON.parse(item.DETAIL_TEXT);
                                        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ processId –≤–º–µ—Å—Ç–æ parentTaskId
                                        return data.processId == currentProcessId;
                                    } catch (e) {
                                        console.warn('Failed to parse DETAIL_TEXT:', e);
                                        return false;
                                    }
                                })
                                .map(item => {
                                    const data = JSON.parse(item.DETAIL_TEXT);
                                    return {
                                        id: item.ID,
                                        futureId: data.futureId,
                                        title: data.title,
                                        description: data.description,
                                        groupId: data.groupId,
                                        responsibleId: data.responsibleId,
                                        conditionType: data.conditionType,
                                        delayMinutes: data.delayMinutes,
                                        positionX: data.positionX,
                                        positionY: data.positionY,
                                        isCreated: data.isCreated,
                                        realTaskId: data.realTaskId
                                    };
                                });
                            resolve(futureTasks);
                        }
                    });
                });
            };

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–∑–∞–¥–∞—á
            const loadAllSubtasks = async (parentTaskId, visitedIds = new Set(), depth = 0) => {
                // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
                if (depth > 5) {
                    addDebugLog('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (5)', '#ff9800');
                    return [];
                }

                if (visitedIds.has(parentTaskId)) {
                    addDebugLog('‚ö†Ô∏è –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –¥–ª—è task-' + parentTaskId, '#ff9800');
                    return [];
                }

                visitedIds.add(parentTaskId);
                addDebugLog('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è task-' + parentTaskId + ' (–≥–ª—É–±–∏–Ω–∞: ' + depth + ')', '#9c27b0');

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á —á–µ—Ä–µ–∑ tasks.task.list
                const subtasks = await new Promise((resolve) => {
                    // –ü—Ä–æ–±—É–µ–º tasks.task.list –≤–º–µ—Å—Ç–æ tasks.task.getlist
                    BX24.callMethod('tasks.task.list', {
                        filter: { PARENT_ID: parentTaskId },
                        select: ['ID', 'TITLE', 'STATUS', 'RESPONSIBLE_ID', 'PARENT_ID']
                    }, (result) => {
                        if (result.error()) {
                            const err = result.error();
                            console.warn('‚ùå tasks.task.list –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', err);

                            // Fallback: –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ REST –Ω–∞–ø—Ä—è–º—É—é
                            addDebugLog('  üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏...', '#ff9800');

                            // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –ø–æ–¥–∑–∞–¥–∞—á–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
                            addDebugLog('  ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–¥–∑–∞–¥–∞—á (API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)', '#9e9e9e');
                            resolve([]);
                        } else {
                            const data = result.data();
                            console.log('‚úÖ tasks.task.list —É—Å–ø–µ—à–Ω–æ:', data);
                            const tasks = data.tasks || data || [];
                            addDebugLog('  üì¶ API –≤–µ—Ä–Ω—É–ª –ø–æ–¥–∑–∞–¥–∞—á: ' + tasks.length, '#2196f3');
                            resolve(tasks);
                        }
                    });
                });

                if (subtasks.length === 0) {
                    addDebugLog('  ‚ÑπÔ∏è –ü–æ–¥–∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è task-' + parentTaskId, '#9e9e9e');
                    return [];
                }

                addDebugLog('  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∑–∞–¥–∞—á: ' + subtasks.length, '#4caf50');

                const allSubtasks = [...subtasks];

                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –∫–∞–∂–¥–æ–π –ø–æ–¥–∑–∞–¥–∞—á–∏
                for (const subtask of subtasks) {
                    const nestedSubtasks = await loadAllSubtasks(subtask.id, visitedIds, depth + 1);
                    allSubtasks.push(...nestedSubtasks);
                }

                return allSubtasks;
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∞–º–∏)
            const loadCreatedTasks = async (taskIds, futureTasks) => {
                if (taskIds.length === 0) {
                    console.log('‚ÑπÔ∏è  –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                    return [];
                }

                console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:', taskIds);
                console.log('üì• –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:', futureTasks.filter(ft => ft.isCreated).map(ft => ft.futureId));

                const createdNodes = [];

                for (const taskId of taskIds) {
                    try {
                        const taskData = await new Promise((resolve) => {
                            BX24.callMethod('tasks.task.get', {
                                taskId: taskId,
                                select: ['ID', 'TITLE', 'STATUS', 'RESPONSIBLE_ID']
                            }, (result) => {
                                if (result.error()) {
                                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á—É:', taskId);
                                    resolve(null);
                                } else {
                                    resolve(result.data().task);
                                }
                            });
                        });

                        if (!taskData) continue;

                        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø—Ä–µ–¥–∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        const futureTask = futureTasks.find(ft => ft.realTaskId == taskId);
                        if (!futureTask) continue;

                        // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ tflow_pos
                        addDebugLog('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è task-' + taskId, '#9c27b0');
                        const savedPosition = await new Promise((resolve) => {
                            BX24.callMethod('entity.item.get', {
                                ENTITY: 'tflow_pos'
                            }, (posResult) => {
                                if (posResult.error()) {
                                    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π:', posResult.error());
                                    addDebugLog('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π', '#f44336');
                                    resolve(null);
                                    return;
                                }

                                const allItems = posResult.data();
                                addDebugLog('üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: ' + allItems.length, '#2196f3');

                                // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é –ø–æ DETAIL_TEXT
                                const matchingItem = allItems.find(item => {
                                    if (!item.DETAIL_TEXT) return false;
                                    try {
                                        const data = JSON.parse(item.DETAIL_TEXT);
                                        return data.taskId == taskId;
                                    } catch (e) {
                                        return false;
                                    }
                                });

                                if (!matchingItem) {
                                    console.log('üìç –î–ª—è –∑–∞–¥–∞—á–∏', taskId, '–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏');
                                    addDebugLog('‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è task-' + taskId + ', –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏', '#ff9800');
                                    resolve(null);
                                } else {
                                    const posData = JSON.parse(matchingItem.DETAIL_TEXT);
                                    console.log('üìç –ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏', taskId, ':', posData);
                                    addDebugLog('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è task-' + taskId + ': (' + Math.round(posData.positionX) + ', ' + Math.round(posData.positionY) + ') ID=' + matchingItem.ID, '#4caf50');
                                    resolve({ x: parseFloat(posData.positionX), y: parseFloat(posData.positionY) });
                                }
                            });
                        });

                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
                        const position = savedPosition || {
                            x: parseFloat(futureTask.positionX),
                            y: parseFloat(futureTask.positionY)
                        };

                        addDebugLog('üìç –ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è task-' + taskId + ': (' + Math.round(position.x) + ', ' + Math.round(position.y) + ')', '#00bcd4');

                        createdNodes.push({
                            id: 'task-' + taskId,
                            type: 'taskNode',
                            position: position,
                            draggable: true,
                            data: {
                                id: taskId,
                                title: taskData.title,
                                statusCode: taskData.status,
                                responsibleId: taskData.responsibleId,
                                isFuture: false,
                                isRealTask: true
                            }
                        });

                        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞:', taskId, taskData.title, '–ø–æ–∑–∏—Ü–∏—è:', position);

                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏:', taskId, error);
                    }
                }

                return createdNodes;
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ processId
            const loadAllProcessTasks = async (processId) => {
                addDebugLog('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ ' + processId, '#9c27b0');

                return new Promise((resolve) => {
                    BX24.callMethod('tasks.task.list', {
                        filter: {
                            'UF_FLOWTASK_PROCESS_ID': processId
                        },
                        select: ['ID', 'TITLE', 'STATUS', 'RESPONSIBLE_ID', 'UF_FLOWTASK_PROCESS_ID']
                    }, async (result) => {
                        if (result.error()) {
                            addDebugLog('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –ø—Ä–æ—Ü–µ—Å—Å–∞: ' + JSON.stringify(result.error()), '#ff9800');
                            resolve([]);
                            return;
                        }

                        const tasks = result.data().tasks || [];
                        addDebugLog('üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –ø—Ä–æ—Ü–µ—Å—Å–∞: ' + tasks.length, '#2196f3');

                        const processNodes = [];

                        for (const taskData of tasks) {
                            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É - –æ–Ω–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
                            if (taskData.id == task.id) {
                                continue;
                            }

                            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
                            const position = await loadTaskPosition(taskData.id);

                            if (!position) {
                                // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - —Ä–∞–∑–º–µ—â–∞–µ–º —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π
                                addDebugLog('‚ö†Ô∏è –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è task-' + taskData.id + ', —Ä–∞–∑–º–µ—â–∞–µ–º —Å–ø—Ä–∞–≤–∞', '#ff9800');
                                processNodes.push({
                                    id: 'task-' + taskData.id,
                                    type: 'taskNode',
                                    position: { x: 500 + (processNodes.length * 150), y: 100 },
                                    draggable: true,
                                    data: {
                                        id: taskData.id,
                                        title: taskData.title,
                                        statusCode: taskData.status,
                                        responsibleId: taskData.responsibleId,
                                        isFuture: false,
                                        isRealTask: true
                                    }
                                });
                            } else {
                                addDebugLog('‚úÖ task-' + taskData.id + ' –ø–æ–∑–∏—Ü–∏—è: (' + Math.round(position.x) + ', ' + Math.round(position.y) + ')', '#00bcd4');
                                processNodes.push({
                                    id: 'task-' + taskData.id,
                                    type: 'taskNode',
                                    position: position,
                                    draggable: true,
                                    data: {
                                        id: taskData.id,
                                        title: taskData.title,
                                        statusCode: taskData.status,
                                        responsibleId: taskData.responsibleId,
                                        isFuture: false,
                                        isRealTask: true
                                    }
                                });
                            }

                            // üîî –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ PullSubscription
                            if (window.PullSubscription && window.PullSubscription.subscribe) {
                                window.PullSubscription.subscribe(
                                    taskData.id,
                                    // onStatusChange callback
                                    (newStatus, taskDataUpdated) => {
                                        console.log('üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ #' + taskData.id + ' –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞:', newStatus);
                                        addDebugLog('üîÑ –°—Ç–∞—Ç—É—Å #' + taskData.id + ' ‚Üí ' + newStatus, '#4caf50');

                                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —É–∑–µ–ª –∑–∞–¥–∞—á–∏
                                        reloadTaskNode(taskData.id);
                                    },
                                    // onTaskComplete callback
                                    (completedTaskId, completedTaskData) => {
                                        console.log('‚úÖ –ó–∞–¥–∞—á–∞ #' + completedTaskId + ' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                                        addDebugLog('‚úÖ –ó–∞–¥–∞—á–∞ #' + completedTaskId + ' –∑–∞–≤–µ—Ä—à–µ–Ω–∞', '#00ff00');

                                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —É–∑–µ–ª –∑–∞–¥–∞—á–∏
                                        reloadTaskNode(completedTaskId);
                                    }
                                );
                            }
                        }

                        addDebugLog('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–∑–ª–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞: ' + processNodes.length, '#00ff00');
                        resolve(processNodes);
                    });
                });
            };

            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–µ–π –∏–∑ entity (–ø–æ processId!)
            const loadConnections = (taskId, parentIds = []) => {
                return new Promise((resolve) => {
                    const currentProcessId = window.currentProcessId || taskId.toString();

                    console.log('%c‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'color: #ff00ff; font-weight: bold;');
                    console.log('%cüîó loadConnections –í–´–ó–í–ê–ù', 'color: #ff00ff; font-weight: bold;');
                    console.log('%cProcessId –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:', currentProcessId, 'color: #00ffff;');

                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_conn'
                    }, (result) => {
                        if (result.error()) {
                            console.warn('–°–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                            resolve([]);
                        } else {
                            const items = result.data();
                            console.log('%cüì• –ü–æ–ª—É—á–µ–Ω–æ items –∏–∑ Entity tflow_conn:', items.length, 'color: #00ff00; font-weight: bold;');
                            console.log("üì• Entity items:", items);

                            // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ processId (–Ω–µ –ø–æ taskId!)
                            const connections = items
                                .filter(item => {
                                    if (!item.DETAIL_TEXT) {
                                        console.log('  ‚ö†Ô∏è Item –±–µ–∑ DETAIL_TEXT:', item.ID);
                                        return false;
                                    }
                                    try {
                                        const data = JSON.parse(item.DETAIL_TEXT);
                                        console.log('  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º connection ID=' + item.ID + ':', {
                                            processId: data.processId,
                                            sourceId: data.sourceId,
                                            targetId: data.targetId,
                                            matches: data.processId == currentProcessId
                                        });
                                        // –§–∏–ª—å—Ç—Ä—É–µ–º –¢–û–õ–¨–ö–û –ø–æ processId
                                        return data.processId == currentProcessId;
                                    } catch (e) {
                                        console.warn('Failed to parse DETAIL_TEXT:', e);
                                        return false;
                                    }
                                })
                                .map(item => {
                                    const data = JSON.parse(item.DETAIL_TEXT);
                                    return {
                                        id: item.ID,
                                        sourceId: data.sourceId,
                                        targetId: data.targetId,
                                        connectionType: data.connectionType
                                    };
                                });

                            console.log('%c‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ' + connections.length + ' connections', 'color: #00ff00; font-weight: bold;');
                            console.log('Connections:', connections);

                            // –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–º–µ–Ω—è–µ–º future-XXX –Ω–∞ task-YYY –µ—Å–ª–∏ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞!
                            console.log('%cüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º future tasks –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ real tasks...', 'color: #ffeb3b; font-weight: bold;');

                            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ future tasks –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                            BX24.callMethod('entity.item.get', {
                                ENTITY: 'tflow_future'
                            }, (futureResult) => {
                                if (futureResult.error()) {
                                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å future tasks –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
                                    resolve(connections);
                                    return;
                                }

                                const futureItems = futureResult.data();
                                console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ future tasks –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', futureItems.length);

                                // –°–æ–∑–¥–∞—ë–º map: futureId -> realTaskId (–¥–ª—è —Ç–µ—Ö —á—Ç–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã)
                                const futureToRealMap = {};
                                futureItems.forEach(futureItem => {
                                    if (!futureItem.DETAIL_TEXT) return;
                                    try {
                                        const futureData = JSON.parse(futureItem.DETAIL_TEXT);
                                        if (futureData.isCreated && futureData.realTaskId) {
                                            futureToRealMap[futureData.futureId] = 'task-' + futureData.realTaskId;
                                            console.log('  ‚úì Mapping: ' + futureData.futureId + ' ‚Üí task-' + futureData.realTaskId);
                                        }
                                    } catch (e) {
                                        // ignore
                                    }
                                });

                                console.log('üìä –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω:', futureToRealMap);

                                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –∫ connections
                                const fixedConnections = connections.map(conn => {
                                    let sourceId = conn.sourceId;
                                    let targetId = conn.targetId;

                                    if (futureToRealMap[conn.sourceId]) {
                                        console.log('  üîÑ –ó–∞–º–µ–Ω—è–µ–º source: ' + conn.sourceId + ' ‚Üí ' + futureToRealMap[conn.sourceId]);
                                        sourceId = futureToRealMap[conn.sourceId];
                                    }

                                    if (futureToRealMap[conn.targetId]) {
                                        console.log('  üîÑ –ó–∞–º–µ–Ω—è–µ–º target: ' + conn.targetId + ' ‚Üí ' + futureToRealMap[conn.targetId]);
                                        targetId = futureToRealMap[conn.targetId];
                                    }

                                    return {
                                        ...conn,
                                        sourceId: sourceId,
                                        targetId: targetId
                                    };
                                });

                                console.log('%c‚úÖ –ü–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã future‚Üítask: ' + fixedConnections.length + ' connections', 'color: #00ff00; font-weight: bold;');
                                fixedConnections.forEach((conn, idx) => {
                                    console.log('  ' + (idx+1) + '. ' + conn.sourceId + ' ‚Üí ' + conn.targetId);
                                });
                                console.log('%c‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'color: #ff00ff; font-weight: bold;');

                                resolve(fixedConnections);
                            });
                        }
                    });
                });
            };

            // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–∑–ª–æ–≤
            const nodesRef = React.useRef(nodes);
            React.useEffect(() => {
                nodesRef.current = nodes;
            }, [nodes]);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–∞ (—Å debounce)
            let savePositionTimeout = null;
            const saveNodePosition = (nodeId, position) => {
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —É–∑–ª–∞:', nodeId, position);
                addDebugLog('üíæ saveNodePosition –≤—ã–∑–≤–∞–Ω –¥–ª—è ' + nodeId, '#00bcd4');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∑–µ–ª –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
                const nodeExists = nodesRef.current.find(n => n.id === nodeId);
                if (!nodeExists) {
                    console.log('‚ö†Ô∏è  –£–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª—ë–Ω), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:', nodeId);
                    addDebugLog('‚ö†Ô∏è –£–∑–µ–ª ' + nodeId + ' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ nodesRef.current (–≤—Å–µ–≥–æ —É–∑–ª–æ–≤: ' + nodesRef.current.length + ')', '#ff9800');
                    return;
                }

                addDebugLog('‚úÖ –£–∑–µ–ª ' + nodeId + ' –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '#4caf50');

                // –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'task-')
                if (nodeId.startsWith('task-')) {
                    const taskId = nodeId.replace('task-', '');
                    addDebugLog('üîé –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è task-' + taskId, '#9c27b0');

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å (–ë–ï–ó FILTER - —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é)
                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_pos'
                    }, (getResult) => {
                        if (getResult.error()) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏:', getResult.error());
                            addDebugLog('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: ' + getResult.error(), '#f44336');
                            return;
                        }

                        const allItems = getResult.data();
                        addDebugLog('üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ Entity: ' + allItems.length, '#2196f3');

                        // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é –ø–æ DETAIL_TEXT
                        const items = allItems.filter(item => {
                            if (!item.DETAIL_TEXT) return false;
                            try {
                                const data = JSON.parse(item.DETAIL_TEXT);
                                return data.taskId == taskId;
                            } catch (e) {
                                return false;
                            }
                        });

                        if (items.length > 0) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                            const itemId = items[0].ID;
                            addDebugLog('üíæ –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é task-' + taskId + ': (' + Math.round(position.x) + ', ' + Math.round(position.y) + ')', '#2196f3');
                            BX24.callMethod('entity.item.update', {
                                ENTITY: 'tflow_pos',
                                ID: itemId,
                                DETAIL_TEXT: JSON.stringify({
                                    taskId: taskId,
                                    positionX: position.x,
                                    positionY: position.y
                                })
                            }, (updateResult) => {
                                if (updateResult.error()) {
                                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', updateResult.error());
                                    addDebugLog('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ task-' + taskId, '#f44336');
                                } else {
                                    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                                    addDebugLog('‚úÖ –ü–æ–∑–∏—Ü–∏—è task-' + taskId + ' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', '#4caf50');
                                }
                            });
                        } else {
                            // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
                            addDebugLog('‚ûï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é task-' + taskId + ': (' + Math.round(position.x) + ', ' + Math.round(position.y) + ')', '#2196f3');
                            BX24.callMethod('entity.item.add', {
                                ENTITY: 'tflow_pos',
                                NAME: 'Task ' + taskId,
                                DETAIL_TEXT: JSON.stringify({
                                    taskId: taskId,
                                    positionX: position.x,
                                    positionY: position.y
                                })
                            }, (addResult) => {
                                if (addResult.error()) {
                                    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', addResult.error());
                                    addDebugLog('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ task-' + taskId, '#f44336');
                                } else {
                                    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∞:', addResult.data());
                                    addDebugLog('‚úÖ –ü–æ–∑–∏—Ü–∏—è task-' + taskId + ' —Å–æ–∑–¥–∞–Ω–∞ (ID: ' + addResult.data() + ')', '#4caf50');
                                }
                            });
                        }
                    });
                }
                // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'future-')
                else if (nodeId.startsWith('future-')) {
                    console.log('üìç –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:', nodeId);
                    
                    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É –ø–æ futureId –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –ø–æ–∑–∏—Ü–∏—é
                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_future'
                    }, (getResult) => {
                        if (getResult.error()) {
                            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á:', getResult.error());
                            return;
                        }

                        const items = getResult.data();
                        const futureItem = items.find(item => {
                            if (!item.DETAIL_TEXT) return false;
                            try {
                                const data = JSON.parse(item.DETAIL_TEXT);
                                return data.futureId === nodeId;
                            } catch (e) {
                                return false;
                            }
                        });

                        if (futureItem) {
                            // –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                            const existingData = JSON.parse(futureItem.DETAIL_TEXT);
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                            existingData.positionX = position.x;
                            existingData.positionY = position.y;

                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                            BX24.callMethod('entity.item.update', {
                                ENTITY: 'tflow_future',
                                ID: futureItem.ID,
                                DETAIL_TEXT: JSON.stringify(existingData)
                            }, (updateResult) => {
                                if (updateResult.error()) {
                                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:', updateResult.error());
                                } else {
                                    console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                                }
                            });
                        } else {
                            console.warn('‚ö†Ô∏è  –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', nodeId);
                            addDebugLog('‚ö†Ô∏è –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ ' + nodeId + ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Entity', '#ff9800');
                        }
                    });
                } else {
                    // –≠—Ç–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ (–Ω–µ task –∏ –Ω–µ future)
                    addDebugLog('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–∑–ª–∞: ' + nodeId, '#ff9800');
                }
            };

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É–∑–ª–æ–≤
            const onNodeDragStop = useCallback((event, node) => {
                console.log('üéØ Drag stopped for:', node.id, node.position);
                addDebugLog('üéØ –ü–µ—Ä–µ—Ç–∞—â–∏–ª–∏ ' + node.id + ' –≤ (' + Math.round(node.position.x) + ', ' + Math.round(node.position.y) + ')', '#ff5722');
                isDraggingRef.current = false;
                saveNodePosition(node.id, node.position);
            }, []);

            // –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ (–∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç —Ç—è–Ω—É—Ç—å –æ—Ç handle)
            const onConnectStart = useCallback((event, { nodeId, handleType }) => {
                console.log('üîó –ù–∞—á–∞–ª–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç —É–∑–ª–∞:', nodeId, '—Ç–∏–ø:', handleType);
                connectingNodeId.current = nodeId;
                console.log('‚úÖ connectingNodeId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', connectingNodeId.current);
            }, []);

            // –ö–æ–Ω–µ—Ü —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ (–∫–æ–≥–¥–∞ –æ—Ç–ø—É—Å–∫–∞—é—Ç)
            const onConnectEnd = useCallback((event) => {
                console.log('üîó –ö–æ–Ω–µ—Ü —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, target:', event.target.className);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—É—Å—Ç–∏–ª–∏ –ª–∏ –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ (react-flow__pane)
                const targetIsPane = event.target.classList.contains('react-flow__pane');

                if (targetIsPane && connectingNodeId.current) {
                    console.log('‚úÖ –û—Ç–ø—É—Å—Ç–∏–ª–∏ –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ! –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏');

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã React Flow canvas
                    const { clientX, clientY } = event;
                    let position = { x: clientX - 300, y: clientY - 100 }; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
                    
                    // –ï—Å–ª–∏ reactFlowInstance –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º screenToFlowPosition
                    if (reactFlowInstance.current) {
                        position = reactFlowInstance.current.screenToFlowPosition({
                            x: clientX,
                            y: clientY
                        });
                        console.log('üìç –ü–æ–∑–∏—Ü–∏—è: browser', { clientX, clientY }, '‚Üí flow', position);
                    } else {
                        console.warn('‚ö†Ô∏è  reactFlowInstance –Ω–µ –≥–æ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
                    }
                    
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    if (typeof window.TaskModal !== 'undefined') {
                        window.TaskModal.show({
                            sourceId: connectingNodeId.current,
                            taskId: task.id,
                            position: position,
                            onSave: (futureTaskData) => {
                                const sourceNodeId = connectingNodeId.current;
                                console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É, sourceId:', sourceNodeId);
                                
                                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º connectingNodeId —Ç–µ–ø–µ—Ä—å
                                connectingNodeId.current = null;
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º sourceId –∫ –¥–∞–Ω–Ω—ã–º
                                saveFutureTask({
                                    ...futureTaskData,
                                    sourceId: sourceNodeId
                                });
                            }
                        });
                    } else {
                        console.error('‚ùå TaskModal –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                    }
                }

                // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º connectingNodeId —Å—Ä–∞–∑—É - –æ–Ω –Ω—É–∂–µ–Ω –≤ callback onSave
                // –°–±—Ä–æ—Å–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–∞–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å
                if (!targetIsPane || !connectingNodeId.current) {
                    connectingNodeId.current = null;
                }
            }, [task.id]);

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É–∑–ª–∞ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            const reloadTaskNode = useCallback((taskId) => {
                console.log('üîÑ reloadTaskNode –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ #' + taskId);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                BX24.callMethod('tasks.task.get', {
                    taskId: taskId,
                    select: ['ID', 'TITLE', 'STATUS', 'RESPONSIBLE_ID']
                }, (result) => {
                    if (result.error()) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏ #' + taskId + ':', result.error());
                        return;
                    }

                    const updatedTask = result.data().task;
                    console.log('‚úÖ –ó–∞–¥–∞—á–∞ #' + taskId + ' –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', updatedTask.status);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–µ–ª –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ
                    setNodes((nds) =>
                        nds.map((node) => {
                            if (node.id === 'task-' + taskId) {
                                return {
                                    ...node,
                                    data: {
                                        ...node.data,
                                        statusCode: updatedTask.status,
                                        title: updatedTask.title,
                                        responsibleId: updatedTask.responsibleId
                                    }
                                };
                            }
                            return node;
                        })
                    );

                    addDebugLog('‚úÖ –£–∑–µ–ª –∑–∞–¥–∞—á–∏ #' + taskId + ' –æ–±–Ω–æ–≤–ª—ë–Ω', '#00ff00');
                });
            }, [setNodes]);

            // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º reloadTaskNode –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            React.useEffect(() => {
                window.FlowCanvas.reloadTaskNode = reloadTaskNode;
                console.log('‚úÖ reloadTaskNode —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ window.FlowCanvas');
            }, [reloadTaskNode]);

            // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∑–µ–ª -> —É–∑–µ–ª (–∫–æ–≥–¥–∞ —Ç—è–Ω—É—Ç –æ—Ç –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞ –∫ –¥—Ä—É–≥–æ–º—É)
            const onConnect = useCallback((params) => {
                console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
                console.log('üîó onConnect –í–´–ó–í–ê–ù!', params);
                console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

                addDebugLog('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', '#ff0000');
                addDebugLog('üîó onConnect –í–´–ó–í–ê–ù!', '#ff0000');
                addDebugLog('source: ' + params.source, '#2196f3');
                addDebugLog('target: ' + params.target, '#2196f3');
                addDebugLog('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', '#ff0000');

                // –°–æ–∑–¥–∞—ë–º –ø—Ä—è–º—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ
                addDebugLog('STEP 1: –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å–≤—è–∑—å', '#2196f3');
                setEdges((eds) => addEdge({ ...params, animated: true }, eds));
                addDebugLog('‚úÖ –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞', '#00ff00');

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–≤—è–∑–∏
                const connectionType = params.target.startsWith('future-') ? 'future' : 'task';
                addDebugLog('STEP 2: –¢–∏–ø —Å–≤—è–∑–∏ = ' + connectionType, '#2196f3');

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –≤ Entity (–ò–î–ï–ù–¢–ò–ß–ù–û saveFutureTask!)
                const connectionData = {
                    parentTaskId: task.id,
                    processId: window.currentProcessId || task.id.toString(), // –î–û–ë–ê–í–õ–ï–ù–û: processId
                    sourceId: params.source,
                    targetId: params.target,
                    connectionType: connectionType
                };

                addDebugLog('STEP 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Entity...', '#2196f3');
                addDebugLog('  ‚Ä¢ parentTaskId: ' + connectionData.parentTaskId, '#9c27b0');
                addDebugLog('  ‚Ä¢ processId: ' + connectionData.processId + ' (type: ' + typeof connectionData.processId + ')', '#ff0000');
                addDebugLog('  ‚Ä¢ sourceId: ' + connectionData.sourceId, '#9c27b0');
                addDebugLog('  ‚Ä¢ targetId: ' + connectionData.targetId, '#9c27b0');
                addDebugLog('  ‚Ä¢ connectionType: ' + connectionData.connectionType, '#9c27b0');
                console.log('üîç connectionData –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', connectionData);

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º EntityManager –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ BX24
                window.EntityManager.createConnection(connectionData)
                    .then((entityId) => {
                        addDebugLog('‚úÖ‚úÖ –°–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Entity —á–µ—Ä–µ–∑ EntityManager!', '#00ff00');
                        addDebugLog('Entity ID: ' + entityId, '#00ff00');

                        // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ ID=' + entityId + ' —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è...');
                        BX24.callMethod('entity.item.get', {
                            ENTITY: 'tflow_conn',
                            FILTER: { ID: entityId }
                        }, (verifyResult) => {
                            if (verifyResult.error()) {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', verifyResult.error());
                            } else {
                                const found = verifyResult.data();
                                console.log('üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è ID=' + entityId + ':', found.length > 0 ? '‚úÖ –ù–ê–ô–î–ï–ù–û' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û');
                                if (found.length > 0) {
                                    console.log('üìÑ –î–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏:', JSON.parse(found[0].DETAIL_TEXT));
                                } else {
                                    console.error('‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ù–û: –°–≤—è–∑—å –∏—Å—á–µ–∑–ª–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!');
                                }
                            }
                        });
                    })
                    .catch((error) => {
                        addDebugLog('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–≤—è–∑–∏!', '#f44336');
                        addDebugLog('–û—à–∏–±–∫–∞: ' + JSON.stringify(error), '#f44336');
                    });

                addDebugLog('STEP 4: EntityManager.createConnection –≤—ã–∑–≤–∞–Ω', '#2196f3');
            }, [setEdges, task.id]);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
            const saveFutureTask = (futureTaskData) => {
                console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É:', futureTaskData);

                const futureId = 'future-' + Date.now();
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º sourceId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å task-X –∏–ª–∏ future-X)
                const sourceId = futureTaskData.sourceId || ('task-' + task.id);
                
                console.log('üîó –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑—å –æ—Ç', sourceId, '–∫', futureId);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ entity —á–µ—Ä–µ–∑ DETAIL_TEXT (PROPERTY_VALUES –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!)
                BX24.callMethod('entity.item.add', {
                    ENTITY: 'tflow_future',
                    NAME: futureTaskData.title.substring(0, 50),
                    DETAIL_TEXT: JSON.stringify({
                        futureId: futureId,
                        parentTaskId: task.id,
                        processId: window.currentProcessId || task.id.toString(), // –î–û–ë–ê–í–õ–ï–ù–û: processId
                        title: futureTaskData.title,
                        description: futureTaskData.description,
                        groupId: futureTaskData.groupId,
                        responsibleId: futureTaskData.responsibleId,
                        conditionType: futureTaskData.conditionType,
                        delayMinutes: futureTaskData.delayMinutes,
                        positionX: futureTaskData.positionX,
                        positionY: futureTaskData.positionY,
                        isCreated: false,
                        realTaskId: null
                    })
                }, (result) => {
                    if (result.error()) {
                        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:', result.error());
                        return;
                    }

                    console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', result.data());
                    addDebugLog('‚úÖ –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Entity (ID: ' + result.data() + ')', '#00ff00');

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —á–µ—Ä–µ–∑ DETAIL_TEXT
                    const connectionData = {
                        parentTaskId: task.id,
                        processId: window.currentProcessId || task.id.toString(), // –î–û–ë–ê–í–õ–ï–ù–û: processId
                        sourceId: sourceId,
                        targetId: futureId,
                        connectionType: 'future'
                    };
                    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –≤ Entity —á–µ—Ä–µ–∑ EntityManager:', connectionData);
                    addDebugLog('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ EntityManager...', '#2196f3');
                    addDebugLog('  ‚Ä¢ processId: ' + connectionData.processId, '#ff0000');
                    addDebugLog('  ‚Ä¢ sourceId: ' + sourceId, '#9c27b0');
                    addDebugLog('  ‚Ä¢ targetId: ' + futureId, '#9c27b0');

                    window.EntityManager.createConnection(connectionData)
                        .then((entityId) => {
                            console.log('‚úÖ –°–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ EntityManager, ID:', entityId);
                            addDebugLog('‚úÖ –°–≤—è–∑—å –¥–ª—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–∞ (ID: ' + entityId + ')', '#00ff00');

                            // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ ID=' + entityId + ' —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è...');
                            BX24.callMethod('entity.item.get', {
                                ENTITY: 'tflow_conn',
                                FILTER: { ID: entityId }
                            }, (verifyResult) => {
                                if (verifyResult.error()) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', verifyResult.error());
                                } else {
                                    const found = verifyResult.data();
                                    console.log('üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è ID=' + entityId + ':', found.length > 0 ? '‚úÖ –ù–ê–ô–î–ï–ù–û' : '‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û');
                                    if (found.length > 0) {
                                        console.log('üìÑ –î–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏:', JSON.parse(found[0].DETAIL_TEXT));
                                    } else {
                                        console.error('‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ù–û: –°–≤—è–∑—å –∏—Å—á–µ–∑–ª–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!');
                                    }
                                }
                            });

                            // –í–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —É–∑–ª—ã –∏ edges
                            // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–∏–≥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
                            
                            // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —É–∑–µ–ª –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
                            const newFutureNode = {
                                id: futureId,
                                type: 'taskNode',
                                position: {
                                    x: parseFloat(futureTaskData.positionX),
                                    y: parseFloat(futureTaskData.positionY)
                                },
                                draggable: true,
                                data: {
                                    id: futureId,
                                    futureId: futureId,
                                    parentTaskId: futureTaskData.parentTaskId,
                                    title: futureTaskData.title,
                                    description: futureTaskData.description,
                                    groupId: futureTaskData.groupId,
                                    responsibleId: futureTaskData.responsibleId,
                                    isFuture: true,
                                    isRealTask: false,
                                    conditionType: futureTaskData.conditionType,
                                    delayMinutes: futureTaskData.delayMinutes,
                                    positionX: futureTaskData.positionX,
                                    positionY: futureTaskData.positionY,
                                    isCreated: futureTaskData.isCreated || false,
                                    realTaskId: futureTaskData.realTaskId || null,
                                    entityItemId: result.data(),  // ID –∏–∑ Entity
                                    onDelete: () => deleteFutureTask(futureId, result.data()),
                                    onEdit: (data) => {
                                        console.log('üìù –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:', data.futureId);
                                        data.onUpdate = updateFutureTask;
                                        window.TaskModal.showEdit(data);
                                    }
                                }
                            };
                            
                            // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π edge
                            const newEdge = {
                                id: 'edge-' + sourceId + '-' + futureId,
                                source: sourceId,
                                target: futureId,
                                type: 'default',
                                className: 'future-edge'
                            };
                            
                            console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª:', futureId);
                            console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑—å:', sourceId, '‚Üí', futureId);
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
                            setNodes(currentNodes => [...currentNodes, newFutureNode]);
                            setEdges(currentEdges => [...currentEdges, newEdge]);
                        })
                        .catch((error) => {
                            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏:', error);
                            addDebugLog('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏: ' + JSON.stringify(error), '#f44336');
                        });
                });
            };

            // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
            const deleteFutureTask = (futureId, entityItemId) => {
                console.log('üóëÔ∏è  –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É:', futureId, 'Entity ID:', entityItemId);
                
                if (!confirm('–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–∑–∞–¥–∞—á—É?')) {
                    return;
                }
                
                // 1. –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É –∏–∑ Entity
                BX24.callMethod('entity.item.delete', {
                    ENTITY: 'tflow_future',
                    ID: entityItemId
                }, (result) => {
                    if (result.error()) {
                        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏:', result.error());
                        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + result.error());
                        return;
                    }
                    
                    console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Entity');
                    
                    // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏ —Å —ç—Ç–æ–π –ø—Ä–µ–¥–∑–∞–¥–∞—á–µ–π
                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_conn'
                    }, (getResult) => {
                        if (getResult.error()) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤—è–∑–∏');
                            loadProcessData();
                            return;
                        }
                        
                        const connections = getResult.data();
                        const toDelete = connections.filter(conn => {
                            if (!conn.DETAIL_TEXT) return false;
                            try {
                                const data = JSON.parse(conn.DETAIL_TEXT);
                                return data.sourceId === futureId || data.targetId === futureId;
                            } catch (e) {
                                return false;
                            }
                        });
                        
                        console.log('üóëÔ∏è  –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', toDelete.length);
                        
                        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏
                        let deleted = 0;
                        toDelete.forEach(conn => {
                            BX24.callMethod('entity.item.delete', {
                                ENTITY: 'tflow_conn',
                                ID: conn.ID
                            }, (delResult) => {
                                if (!delResult.error()) {
                                    deleted++;
                                    console.log('‚úÖ –°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞:', conn.ID);
                                }
                                
                                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                                if (deleted === toDelete.length) {
                                    console.log('‚úÖ –í—Å–µ —Å–≤—è–∑–∏ —É–¥–∞–ª–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...');
                                    loadProcessData();
                                }
                            });
                        });
                        
                        // –ï—Å–ª–∏ —Å–≤—è–∑–µ–π –Ω–µ –±—ã–ª–æ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
                        if (toDelete.length === 0) {
                            loadProcessData();
                        }
                    });
                });
            };

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
            const updateFutureTask = (updatedData) => {
                console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–∑–∞–¥–∞—á—É:', updatedData.futureId);

                // –ù–∞–π—Ç–∏ Entity ID –¥–ª—è —ç—Ç–æ–π –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏
                BX24.callMethod('entity.item.get', {
                    ENTITY: 'tflow_future'
                }, (result) => {
                    if (result.error()) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–∑–∞–¥–∞—á:', result.error());
                        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + result.error());
                        return;
                    }

                    const items = result.data();
                    const futureItem = items.find(item => {
                        if (!item.DETAIL_TEXT) return false;
                        try {
                            const data = JSON.parse(item.DETAIL_TEXT);
                            return data.futureId === updatedData.futureId;
                        } catch (e) {
                            return false;
                        }
                    });

                    if (!futureItem) {
                        console.error('–ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', updatedData.futureId);
                        alert('–ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                        return;
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º Entity
                    BX24.callMethod('entity.item.update', {
                        ENTITY: 'tflow_future',
                        ID: futureItem.ID,
                        DETAIL_TEXT: JSON.stringify(updatedData)
                    }, (updateResult) => {
                        if (updateResult.error()) {
                            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateResult.error());
                            alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + updateResult.error());
                            return;
                        }

                        console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

                        // –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–µ–ª –Ω–∞ –ø–æ–ª–æ—Ç–Ω–µ –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                        setNodes((currentNodes) => {
                            return currentNodes.map(node => {
                                if (node.id === updatedData.futureId) {
                                    return {
                                        ...node,
                                        data: {
                                            ...node.data,
                                            title: updatedData.title,
                                            description: updatedData.description,
                                            conditionType: updatedData.conditionType,
                                            delayMinutes: updatedData.delayMinutes
                                        }
                                    };
                                }
                                return node;
                            });
                        });
                    });
                });
            };

            // Callback –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –õ–Æ–ë–û–ô –∑–∞–¥–∞—á–∏ –Ω–∞ canvas
            const handleStatusChange = React.useCallback((newStatus, taskData) => {
                const changedTaskId = taskData.id;
                addDebugLog('üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω —É task-' + changedTaskId + ': ' + newStatus, '#ff9800');

                setNodes((currentNodes) => {
                    return currentNodes.map(node => {
                        // –û–±–Ω–æ–≤–ª—è–µ–º –õ–Æ–ë–£–Æ –∑–∞–¥–∞—á—É –Ω–∞ canvas, –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é!
                        if (node.id === 'task-' + changedTaskId && node.data.isRealTask) {
                            console.log('%c  ‚Üí –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–µ–ª task-' + changedTaskId + ' —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ' + newStatus, 'color: #ff9800;');
                            return {
                                ...node,
                                data: {
                                    ...node.data,
                                    statusCode: newStatus,
                                    title: taskData.title || node.data.title
                                }
                            };
                        }
                        return node;
                    });
                });
            }, [setNodes]);

            // Callback –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
            const handleTaskComplete = React.useCallback((taskId, taskData) => {
                addDebugLog('‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê! ID: ' + taskId, '#ff0000');
                addDebugLog('üöÄ –í—ã–∑–æ–≤ TaskCreator.processCompletedTask', '#2196f3');

                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ TaskCreator –∑–∞–≥—Ä—É–∂–µ–Ω
                    const hasTaskCreator = !!window.TaskCreator;
                    const hasFunction = typeof window.TaskCreator?.processCompletedTask === 'function';

                    addDebugLog('üîç window.TaskCreator —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ' + hasTaskCreator, '#9c27b0');
                    addDebugLog('üîç processCompletedTask —Ñ—É–Ω–∫—Ü–∏—è: ' + hasFunction, '#9c27b0');

                    if (!hasTaskCreator || !hasFunction) {
                        addDebugLog('‚ùå TaskCreator –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!', '#f44336');
                        return;
                    }

                    addDebugLog('‚úÖ TaskCreator –Ω–∞–π–¥–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º...', '#00ff00');

                    window.TaskCreator.processCompletedTask(taskId, (createdTasksData) => {
                        addDebugLog('‚úÖ –°–û–ó–î–ê–ù–û –ó–ê–î–ê–ß: ' + createdTasksData.length, '#00ff00');

                        if (createdTasksData.length === 0) {
                            addDebugLog('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '#9c27b0');
                            return;
                        }

                        // –°–æ–∑–¥–∞—ë–º map: futureId -> newTaskId
                        const futureToTaskMap = {};
                        createdTasksData.forEach(taskData => {
                            futureToTaskMap[taskData.futureId] = taskData.taskId;
                            addDebugLog('  ‚Ä¢ ' + taskData.futureId + ' ‚Üí task-' + taskData.taskId, '#2196f3');
                        });

                        addDebugLog('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–ª—ã –Ω–∞ –ø–æ–ª–æ—Ç–Ω–µ (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)...', '#2196f3');

                        // –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–ª—ã –ë–ï–ó –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ canvas!
                        setNodes((currentNodes) => {
                            return currentNodes.map(node => {
                                // –ï—Å–ª–∏ —ç—Ç–æ future —É–∑–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–∞–∫ –∑–∞–¥–∞—á–∞
                                if (futureToTaskMap[node.id]) {
                                    const newTaskId = futureToTaskMap[node.id];
                                    addDebugLog('  ‚úì –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ' + node.id + ' ‚Üí task-' + newTaskId, '#00ff00');

                                    return {
                                        ...node,
                                        id: 'task-' + newTaskId,  // –ú–µ–Ω—è–µ–º ID!
                                        type: 'taskNode',  // –ú–µ–Ω—è–µ–º —Ç–∏–ø –Ω–∞ task
                                        data: {
                                            ...node.data,
                                            id: newTaskId,
                                            isFuture: false,  // –ë–æ–ª—å—à–µ –Ω–µ future!
                                            isRealTask: true,  // –¢–µ–ø–µ—Ä—å —Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞!
                                            statusCode: 2  // –°—Ç–∞—Ç—É—Å "–ñ–¥—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
                                        }
                                    };
                                }
                                return node;
                            });
                        });

                        // –û–±–Ω–æ–≤–ª—è–µ–º edges: –∑–∞–º–µ–Ω—è–µ–º future-XXX –Ω–∞ task-YYY
                        setEdges((currentEdges) => {
                            return currentEdges.map(edge => {
                                let newSource = edge.source;
                                let newTarget = edge.target;

                                if (futureToTaskMap[edge.source]) {
                                    newSource = 'task-' + futureToTaskMap[edge.source];
                                    addDebugLog('  ‚úì Edge source: ' + edge.source + ' ‚Üí ' + newSource, '#00ff00');
                                }

                                if (futureToTaskMap[edge.target]) {
                                    newTarget = 'task-' + futureToTaskMap[edge.target];
                                    addDebugLog('  ‚úì Edge target: ' + edge.target + ' ‚Üí ' + newTarget, '#00ff00');
                                }

                                if (newSource !== edge.source || newTarget !== edge.target) {
                                    return {
                                        ...edge,
                                        id: 'edge-' + newSource + '-' + newTarget,
                                        source: newSource,
                                        target: newTarget
                                    };
                                }

                                return edge;
                            });
                        });

                        addDebugLog('‚úÖ –£–∑–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ë–ï–ó –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏!', '#00ff00');
                    });
                } catch (error) {
                    addDebugLog('‚ùå –û–®–ò–ë–ö–ê: ' + error.message, '#f44336');
                }
            }, []);

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Pull & Push
            useEffect(() => {
                // –ù–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø–æ–∫–∞ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ nodes –ø—É—Å—Ç—ã–µ
                if (isLoading || nodes.length === 0) {
                    return;
                }

                addDebugLog('üîî –ü–û–î–ü–ò–°–ö–ê –Ω–∞ –∑–∞–¥–∞—á—É #' + task.id, '#9c27b0');

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –í–°–ï –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–ª–æ—Ç–Ω–µ —á–µ—Ä–µ–∑ PullSubscription
                console.log('%cüìû –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –í–°–ï –∑–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–ª–æ—Ç–Ω–µ', 'color: #9c27b0; font-weight: bold;');

                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ taskId –∏–∑ nodes (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏, –Ω–µ future)
                const allTaskIds = nodes
                    .filter(node => node.id.startsWith('task-'))
                    .map(node => node.id.replace('task-', ''));

                addDebugLog('üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ' + allTaskIds.length + ' –∑–∞–¥–∞—á', '#673ab7');
                console.log('  ‚Ä¢ –ó–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:', allTaskIds);

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
                allTaskIds.forEach(taskId => {
                    window.PullSubscription.subscribe(
                        taskId,
                        handleStatusChange,
                        handleTaskComplete
                    );
                    console.log('  ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ task-' + taskId);
                });

                console.log('%c‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ ' + allTaskIds.length + ' –∑–∞–¥–∞—á!', 'color: #4caf50; font-weight: bold;');

                // –°—Ç–∞—Ä—ã–π –∫–æ–¥ polling (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω):
                /*
                const pollInterval = setInterval(() => {
                    BX24.callMethod('tasks.task.get', {
                        taskId: task.id,
                        select: ['ID', 'TITLE', 'STATUS']
                    }, (result) => {
                        if (result.error()) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
                            return;
                        }

                        const taskData = result.data();
                        if (taskData && taskData.task) {
                            const currentStatus = taskData.task.status;

                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                            setNodes((currentNodes) => {
                                const currentNode = currentNodes.find(n => n.id === 'task-' + task.id);
                                if (currentNode && currentNode.data.statusCode != currentStatus) {
                                    console.log('üîÑ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è:', currentNode.data.statusCode, '‚Üí', currentStatus);

                                    return currentNodes.map((node) => {
                                        if (node.id === 'task-' + task.id) {
                                            return {
                                                ...node,
                                                data: {
                                                    ...node.data,
                                                    statusCode: currentStatus,
                                                    title: taskData.task.title || node.data.title
                                                }
                                            };
                                        }
                                        return node;
                                    });
                                }
                                return currentNodes;
                            });
                        }
                    });
                }, 3000);
                return () => clearInterval(pollInterval);
                */

                // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                return () => {
                    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á
                    if (window.PullSubscription && typeof window.PullSubscription.unsubscribe === 'function') {
                        allTaskIds.forEach(taskId => {
                            window.PullSubscription.unsubscribe(taskId);
                        });
                        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è ' + allTaskIds.length + ' –∑–∞–¥–∞—á');
                    } else {
                        console.warn('‚ö†Ô∏è PullSubscription –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É');
                    }
                };
            }, [isLoading, task.id]); // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

            // –¢–∏–ø—ã —É–∑–ª–æ–≤ (–æ–±—ë—Ä–Ω—É—Ç—ã –≤ useMemo –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
            const nodeTypes = useMemo(() => ({
                taskNode: window.TaskNode
            }), []);

            if (isLoading) {
                return React.createElement('div', {
                    style: {
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        height: '100vh',
                        fontSize: '24px'
                    }
                }, '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...');
            }

            // –¢–µ—Å—Ç Entity API - –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö ID
            const testEntityAPI = () => {
                console.log('üî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º Entity API –∏ FILTER...');

                // –¢–ï–°–¢ -1: entity.item.list —Å FILTER
                console.log('\nüìù –¢–ï–°–¢ -1: entity.item.list —Å FILTER >ID=400');
                BX24.callMethod('entity.item.list', {
                    ENTITY: 'tflow_conn',
                    FILTER: { '>ID': '400' }
                }, (resList) => {
                    if (resList.error()) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ entity.item.list:', resList.error());
                    } else {
                        const items = resList.data();
                        console.log('  ‚úÖ entity.item.list –≤–µ—Ä–Ω—É–ª:', items.length, '–∑–∞–ø–∏—Å–µ–π');
                        if (items.length > 0) {
                            const ids = items.map(i => i.ID);
                            console.log('  üìã ID:', ids.join(', '));

                            const has402 = items.find(i => i.ID === '402');
                            const has404 = items.find(i => i.ID === '404');
                            console.log('  üîç ID=402:', has402 ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢');
                            console.log('  üîç ID=404:', has404 ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢');

                            if (has402) {
                                console.log('  üìÑ –î–∞–Ω–Ω—ã–µ 402:', JSON.parse(has402.DETAIL_TEXT));
                            }
                        }
                    }
                });

                // –¢–ï–°–¢ 0: SORT DESC (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
                console.log('\nüìù –¢–ï–°–¢ 0: SORT DESC - –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50');
                BX24.callMethod('entity.item.get', {
                    ENTITY: 'tflow_conn',
                    SORT: { ID: 'DESC' }
                }, (res0) => {
                    if (res0.error()) {
                        console.error('‚ùå –û—à–∏–±–∫–∞:', res0.error());
                        return;
                    }
                    const items = res0.data();
                    console.log('  üì¶ –ü–æ–ª—É—á–µ–Ω–æ:', items.length);
                    const ids = items.map(i => parseInt(i.ID)).sort((a,b) => b-a);
                    console.log('  üìä ID –¥–∏–∞–ø–∞–∑–æ–Ω:', ids.length > 0 ? `${ids[0]} - ${ids[ids.length-1]}` : '–ø—É—Å—Ç–æ');
                    console.log('  üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 ID:', ids.slice(0, 10).join(', '));

                    const has402 = items.find(i => i.ID === '402');
                    const has404 = items.find(i => i.ID === '404');
                    console.log('  üîç ID=402:', has402 ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢');
                    console.log('  üîç ID=404:', has404 ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢');
                });

                // –¢–ï–°–¢ 1: FILTER >=ID
                console.log('\nüìù –¢–ï–°–¢ 1: FILTER >=ID=400');
                BX24.callMethod('entity.item.get', {
                    ENTITY: 'tflow_conn',
                    FILTER: { '>=ID': '400' }
                }, (res1) => {
                    const items = res1.data();
                    console.log('  üì¶ –ü–æ–ª—É—á–µ–Ω–æ:', items.length);
                    if (items.length > 0) {
                        const ids = items.map(i => i.ID);
                        console.log('  üìã ID:', ids.join(', '));
                    }
                });

                // 2. –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–≤—è–∑–∏ (SORT ASC)
                console.log('\nüìù –¢–ï–°–¢ 2: SORT ASC - –ø–µ—Ä–≤—ã–µ 50');
                BX24.callMethod('entity.item.get', {
                    ENTITY: 'tflow_conn'
                }, (result) => {
                    if (result.error()) {
                        console.error('‚ùå –û—à–∏–±–∫–∞:', result.error());
                        return;
                    }

                    const items = result.data();
                    console.log('  üì¶ –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π:', items.length);

                    // –í—Å–µ ID
                    const allIds = items.map(i => i.ID);
                    console.log('üìã –í—Å–µ ID:', allIds.join(', '));

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ID=402, 404
                    const has402 = items.find(i => i.ID === '402');
                    const has404 = items.find(i => i.ID === '404');
                    console.log('üîç ID=402:', has402 ? '‚úÖ –ù–ê–ô–î–ï–ù–û' : '‚ùå –ù–ï–¢');
                    console.log('üîç ID=404:', has404 ? '‚úÖ –ù–ê–ô–î–ï–ù–û' : '‚ùå –ù–ï–¢');

                    if (has402) console.log('  –î–∞–Ω–Ω—ã–µ 402:', JSON.parse(has402.DETAIL_TEXT));
                    if (has404) console.log('  –î–∞–Ω–Ω—ã–µ 404:', JSON.parse(has404.DETAIL_TEXT));

                    // 2. –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID
                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_conn',
                        FILTER: { ID: '402' }
                    }, (res402) => {
                        console.log('üîç –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å ID=402:', res402.data().length > 0 ? '‚úÖ –ù–ê–ô–î–ï–ù–û' : '‚ùå –ù–ï–¢');
                        if (res402.data().length > 0) {
                            console.log('  –î–∞–Ω–Ω—ã–µ:', JSON.parse(res402.data()[0].DETAIL_TEXT));
                        }
                    });

                    BX24.callMethod('entity.item.get', {
                        ENTITY: 'tflow_conn',
                        FILTER: { ID: '404' }
                    }, (res404) => {
                        console.log('üîç –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å ID=404:', res404.data().length > 0 ? '‚úÖ –ù–ê–ô–î–ï–ù–û' : '‚ùå –ù–ï–¢');
                        if (res404.data().length > 0) {
                            console.log('  –î–∞–Ω–Ω—ã–µ:', JSON.parse(res404.data()[0].DETAIL_TEXT));
                        }
                    });

                    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ —Å processId=116
                    const conn116 = items.filter(item => {
                        if (!item.DETAIL_TEXT) return false;
                        try {
                            const data = JSON.parse(item.DETAIL_TEXT);
                            return data.processId == '116';
                        } catch (e) {
                            return false;
                        }
                    });
                    console.log('üîç –°–≤—è–∑–µ–π —Å processId=116:', conn116.length);
                    conn116.forEach(item => {
                        const data = JSON.parse(item.DETAIL_TEXT);
                        console.log(`  ID=${item.ID}: ${data.sourceId} ‚Üí ${data.targetId}`);
                    });
                });
            };
            window.testEntityAPI = testEntityAPI; // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ window

            // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑—è–º–∏
            const showConnectionsModal = () => {
                console.log('üîß –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑—è–º–∏');

                BX24.callMethod('entity.item.get', {
                    ENTITY: 'tflow_conn'
                }, (result) => {
                    if (result.error()) {
                        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–µ–π: ' + JSON.stringify(result.error()));
                        return;
                    }

                    const allConnections = result.data();
                    const processConnections = allConnections.filter(item => {
                        if (!item.DETAIL_TEXT) return false;
                        try {
                            const data = JSON.parse(item.DETAIL_TEXT);
                            return data.processId == processId;
                        } catch (e) {
                            return false;
                        }
                    });

                    console.log('üìä –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –≤ Entity:', allConnections.length);
                    console.log('üìä –°–≤—è–∑–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', processId + ':', processConnections.length);

                    let html = '<div style="padding: 20px; max-width: 800px;">';
                    html += '<h2>üîó –°–≤—è–∑–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ ' + processId + '</h2>';
                    html += '<p>–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: <b>' + processConnections.length + '</b></p>';
                    html += '<p>–í—Å–µ–≥–æ –≤ Entity: ' + allConnections.length + '</p>';
                    html += '<hr style="margin: 20px 0;">';

                    if (processConnections.length === 0) {
                        html += '<p>‚ùå –°–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
                    } else {
                        html += '<table style="width: 100%; border-collapse: collapse;">';
                        html += '<tr style="background: #f0f0f0;">';
                        html += '<th style="padding: 10px; border: 1px solid #ddd;">ID</th>';
                        html += '<th style="padding: 10px; border: 1px solid #ddd;">Source</th>';
                        html += '<th style="padding: 10px; border: 1px solid #ddd;">Target</th>';
                        html += '<th style="padding: 10px; border: 1px solid #ddd;">Type</th>';
                        html += '<th style="padding: 10px; border: 1px solid #ddd;">–î–µ–π—Å—Ç–≤–∏–µ</th>';
                        html += '</tr>';

                        processConnections.forEach(item => {
                            try {
                                const data = JSON.parse(item.DETAIL_TEXT);
                                html += '<tr>';
                                html += '<td style="padding: 8px; border: 1px solid #ddd;">' + item.ID + '</td>';
                                html += '<td style="padding: 8px; border: 1px solid #ddd;">' + data.sourceId + '</td>';
                                html += '<td style="padding: 8px; border: 1px solid #ddd;">' + data.targetId + '</td>';
                                html += '<td style="padding: 8px; border: 1px solid #ddd;">' + data.connectionType + '</td>';
                                html += '<td style="padding: 8px; border: 1px solid #ddd; text-align: center;">';
                                html += '<button onclick="window.deleteConnection(' + item.ID + ')" style="background: #f44336; color: white; border: none; padding: 5px 15px; border-radius: 4px; cursor: pointer;">–£–¥–∞–ª–∏—Ç—å</button>';
                                html += '</td>';
                                html += '</tr>';
                            } catch (e) {}
                        });

                        html += '</table>';
                        html += '<hr style="margin: 20px 0;">';
                        html += '<button onclick="window.deleteAllProcessData(\'' + processId + '\')" style="background: #f44336; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; font-weight: bold;">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞</button>';
                    }

                    html += '<br><br><button onclick="window.closeModal()" style="background: #2196f3; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">–ó–∞–∫—Ä—ã—Ç—å</button>';
                    html += '</div>';

                    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª–∫—É
                    const modal = document.createElement('div');
                    modal.id = 'connectionsModal';
                    modal.style.cssText = 'position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 10000;';
                    modal.innerHTML = '<div style="background: white; border-radius: 8px; max-height: 80vh; overflow-y: auto;">' + html + '</div>';
                    document.body.appendChild(modal);

                    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                    window.closeModal = () => {
                        const modal = document.getElementById('connectionsModal');
                        if (modal) modal.remove();
                    };

                    window.deleteConnection = (connectionId) => {
                        if (!confirm('–£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å ID=' + connectionId + '?')) return;

                        BX24.callMethod('entity.item.delete', {
                            ENTITY: 'tflow_conn',
                            ID: connectionId
                        }, (deleteResult) => {
                            if (deleteResult.error()) {
                                alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + JSON.stringify(deleteResult.error()));
                            } else {
                                console.log('‚úÖ –°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞:', connectionId);
                                alert('–°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                                window.closeModal();
                            }
                        });
                    };

                    window.deleteAllProcessData = (procId) => {
                        if (!confirm('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n–≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ ' + procId + ':\n- –í—Å–µ —Å–≤—è–∑–∏\n- –í—Å–µ –ø—Ä–µ–¥–∑–∞–¥–∞—á–∏\n- –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                            return;
                        }

                        console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞', procId);

                        window.EntityManager.deleteAllProcessData(procId)
                            .then((stats) => {
                                console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', stats);
                                alert('–£–¥–∞–ª–µ–Ω–æ:\n- –°–≤—è–∑–µ–π: ' + stats.connections + '\n- –ü—Ä–µ–¥–∑–∞–¥–∞—á: ' + stats.futures + '\n- –ü–æ–∑–∏—Ü–∏–π: ' + stats.positions);
                                window.closeModal();
                                window.location.reload();
                            })
                            .catch((error) => {
                                console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
                                alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + JSON.stringify(error));
                            });
                    };
                });
            };

            return React.createElement('div', {
                style: {
                    width: '100%',
                    height: '100vh',
                    background: '#f5f7fa',
                    position: 'relative'
                }
            },
                // –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑—è–º–∏
                React.createElement('button', {
                    onClick: showConnectionsModal,
                    style: {
                        position: 'absolute',
                        top: '20px',
                        right: '20px',
                        zIndex: 1000,
                        background: '#2196f3',
                        color: 'white',
                        border: 'none',
                        padding: '12px 20px',
                        borderRadius: '8px',
                        cursor: 'pointer',
                        fontSize: '14px',
                        fontWeight: 'bold',
                        boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
                    }
                }, 'üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑—è–º–∏'),
                // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∞ Entity API
                React.createElement('button', {
                    onClick: testEntityAPI,
                    style: {
                        position: 'absolute',
                        top: '70px',
                        right: '20px',
                        zIndex: 1000,
                        background: '#ff9800',
                        color: 'white',
                        border: 'none',
                        padding: '12px 20px',
                        borderRadius: '8px',
                        cursor: 'pointer',
                        fontSize: '14px',
                        fontWeight: 'bold',
                        boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
                    }
                }, 'üî¨ –¢–µ—Å—Ç Entity'),
                React.createElement(ReactFlow, {
                    nodes: nodes,
                    edges: edges,
                    nodesDraggable: true,
                    onNodesChange: onNodesChange,
                    onEdgesChange: onEdgesChange,
                    onNodeDragStop: onNodeDragStop,
                    onConnect: onConnect,
                    onConnectStart: onConnectStart,
                    onConnectEnd: onConnectEnd,
                    onInit: (instance) => {
                        reactFlowInstance.current = instance;
                        console.log('‚úÖ ReactFlow instance –≥–æ—Ç–æ–≤');

                        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        setTimeout(() => {
                            console.log('%c‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'color: #ff00ff; font-weight: bold;');
                            console.log('%cüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ReactFlow –ü–û–°–õ–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò', 'color: #ff00ff; font-weight: bold; font-size: 16px;');
                            console.log('Nodes –≤ ReactFlow:', instance.getNodes().length);
                            instance.getNodes().forEach(n => console.log('  - ' + n.id));
                            console.log('Edges –≤ ReactFlow:', instance.getEdges().length);
                            instance.getEdges().forEach(e => console.log('  - ' + e.id + ' (' + e.source + ' ‚Üí ' + e.target + ')'));
                            console.log('%c‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê', 'color: #ff00ff; font-weight: bold;');
                        }, 1000);
                    },
                    nodeTypes: nodeTypes,
                    fitView: true,
                    minZoom: 0.5,
                    maxZoom: 1.5,
                    connectionMode: 'loose', // –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤—è–∑–∏ –≤ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
                    defaultEdgeOptions: {
                        type: 'default',
                        animated: false
                    }
                },
                    React.createElement(Controls),
                    React.createElement(Background, {
                        variant: 'dots',
                        gap: 12,
                        size: 1,
                        color: '#ddd'
                    })
                )
            );
        }

        // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(React.createElement(FlowApp));

        console.log('‚úÖ FlowCanvas rendered');
    }
};

console.log('‚úÖ FlowCanvas component loaded');
